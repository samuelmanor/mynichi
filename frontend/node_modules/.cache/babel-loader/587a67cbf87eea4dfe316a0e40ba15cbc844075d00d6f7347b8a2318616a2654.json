{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { getFormattedDate } from \"../utils/getFormattedDate\";\nimport { useQuery } from \"@apollo/client\";\nimport { FIND_PAGE } from \"../utils/queries\";\n\n// const initialState = {\n//   id: 0,\n//   date: {\n//     month: 0,\n//     day: {\n//       number: 0,\n//       name: \"\",\n//     },\n//     year: 0,\n//   },\n// };\n\nconst pageSlice = createSlice({\n  name: \"pages\",\n  initialState: {\n    currentPage: {\n      id: 0,\n      date: {\n        day: {\n          name: \"\",\n          number: 0\n        },\n        month: 0,\n        year: 0\n      }\n    },\n    pageCount: 1\n  },\n  reducers: {\n    // getTodaysPage(state, action) {\n    //   // console.log(\"getTodaysPage\", action.payload);\n    //   // state.currentPage = action.payload;\n    // },\n    setCurrentPage(state, action) {\n      console.log(\"setCurrentPage\", action.payload);\n      state.id = action.payload.id;\n      state.date = action.payload.date;\n    },\n    addPage(state, action) {\n      state.currentPage = {\n        id: state.pageCount + 1,\n        date: action.payload\n      };\n    }\n  }\n});\nexport const {\n  setCurrentPage\n} = pageSlice.actions;\nexport const getTodaysPage = today => {\n  return dispatch => {\n    // const today = getFormattedDate();\n    // console.log(today);\n    // const page = state.pages.find((page) => {\n    //   return (\n    //     page.date.year === today.year &&\n    //     page.date.month === today.month &&\n    //     page.date.day.number === today.day.number\n    //   );\n    // });\n    // if (page) {\n    //   // if there is a page for today, set it as the current page\n    //   dispatch(setCurrentPage(page));\n    // } else {\n    //   // if there is no page for today, create a new page\n    //   dispatch(addPage(today));\n    // }\n  };\n};\nexport default pageSlice.reducer;","map":{"version":3,"names":["createSlice","getFormattedDate","useQuery","FIND_PAGE","pageSlice","name","initialState","currentPage","id","date","day","number","month","year","pageCount","reducers","setCurrentPage","state","action","console","log","payload","addPage","actions","getTodaysPage","today","dispatch","reducer"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/reducers/PageReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { getFormattedDate } from \"../utils/getFormattedDate\";\nimport { useQuery } from \"@apollo/client\";\nimport { FIND_PAGE } from \"../utils/queries\";\n\n// const initialState = {\n//   id: 0,\n//   date: {\n//     month: 0,\n//     day: {\n//       number: 0,\n//       name: \"\",\n//     },\n//     year: 0,\n//   },\n// };\n\nconst pageSlice = createSlice({\n  name: \"pages\",\n  initialState: {\n    currentPage: {\n      id: 0,\n      date: {\n        day: {\n          name: \"\",\n          number: 0,\n        },\n        month: 0,\n        year: 0,\n      },\n    },\n    pageCount: 1,\n  },\n  reducers: {\n    // getTodaysPage(state, action) {\n    //   // console.log(\"getTodaysPage\", action.payload);\n    //   // state.currentPage = action.payload;\n    // },\n    setCurrentPage(state, action) {\n      console.log(\"setCurrentPage\", action.payload);\n      state.id = action.payload.id;\n      state.date = action.payload.date;\n    },\n    addPage(state, action) {\n      state.currentPage = {\n        id: state.pageCount + 1,\n        date: action.payload,\n      };\n    },\n  },\n});\n\nexport const { setCurrentPage } = pageSlice.actions;\n\nexport const getTodaysPage = (today) => {\n  return (dispatch) => {\n    // const today = getFormattedDate();\n    // console.log(today);\n    // const page = state.pages.find((page) => {\n    //   return (\n    //     page.date.year === today.year &&\n    //     page.date.month === today.month &&\n    //     page.date.day.number === today.day.number\n    //   );\n    // });\n    // if (page) {\n    //   // if there is a page for today, set it as the current page\n    //   dispatch(setCurrentPage(page));\n    // } else {\n    //   // if there is no page for today, create a new page\n    //   dispatch(addPage(today));\n    // }\n  };\n};\n\nexport default pageSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,SAAS,QAAQ,kBAAkB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC5BK,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,WAAW,EAAE;MACXC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE;QACJC,GAAG,EAAE;UACHL,IAAI,EAAE,EAAE;UACRM,MAAM,EAAE;QACV,CAAC;QACDC,KAAK,EAAE,CAAC;QACRC,IAAI,EAAE;MACR;IACF,CAAC;IACDC,SAAS,EAAE;EACb,CAAC;EACDC,QAAQ,EAAE;IACR;IACA;IACA;IACA;IACAC,cAAcA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC5BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,MAAM,CAACG,OAAO,CAAC;MAC7CJ,KAAK,CAACT,EAAE,GAAGU,MAAM,CAACG,OAAO,CAACb,EAAE;MAC5BS,KAAK,CAACR,IAAI,GAAGS,MAAM,CAACG,OAAO,CAACZ,IAAI;IAClC,CAAC;IACDa,OAAOA,CAACL,KAAK,EAAEC,MAAM,EAAE;MACrBD,KAAK,CAACV,WAAW,GAAG;QAClBC,EAAE,EAAES,KAAK,CAACH,SAAS,GAAG,CAAC;QACvBL,IAAI,EAAES,MAAM,CAACG;MACf,CAAC;IACH;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEL;AAAe,CAAC,GAAGZ,SAAS,CAACmB,OAAO;AAEnD,OAAO,MAAMC,aAAa,GAAIC,KAAK,IAAK;EACtC,OAAQC,QAAQ,IAAK;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;AACH,CAAC;AAED,eAAetB,SAAS,CAACuB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}