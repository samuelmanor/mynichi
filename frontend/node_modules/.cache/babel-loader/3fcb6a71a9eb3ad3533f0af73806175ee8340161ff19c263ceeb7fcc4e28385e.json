{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { Page } from \"./components/Page\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCurrentPage } from \"./reducers/PageReducer\";\nimport { addPage } from \"./reducers/JournalReducer\";\nimport { getFormattedDate } from \"./utils/getFormattedDate\";\nimport { getTodaysPage } from \"./reducers/PageReducer\";\nimport { useQuery } from \"@apollo/client\";\nimport { FIND_PAGE } from \"./utils/queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const today = getFormattedDate();\n  const todaysPage = useQuery(FIND_PAGE, {\n    variables: {\n      month: today.month,\n      dayNum: today.day.number,\n      year: today.year\n    }\n  });\n  // const pages = useSelector((state) => state.journal.pages);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // if (pages) {\n    //   // get today's date\n    //   const today = getFormattedDate();\n    //   // check if there is a page for today\n    //   const page = pages.find(\n    //     (page) =>\n    //       page.date.year === today.year &&\n    //       page.date.month === today.month &&\n    //       page.date.day.number === today.day.number\n    //   );\n    //   if (page) {\n    //     // if there is a page for today, set it as the current page\n    //     dispatch(setCurrentPage(page));\n    //   } else {\n    //     // if there is no page for today, create a new page\n    //     dispatch(addPage(today));\n    //   }\n    // }\n    // dispatch(getTodaysPage());\n    if (todaysPage.data) {\n      dispatch(setCurrentPage(todaysPage.data.findPage));\n    } else {\n      dispatch(addPage(today));\n    }\n  }, [todaysPage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Page, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"BZp0Ba4ZXcYWsZ447MKI8+ufu4s=\", false, function () {\n  return [useQuery, useDispatch];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","Page","useDispatch","useSelector","setCurrentPage","addPage","getFormattedDate","getTodaysPage","useQuery","FIND_PAGE","jsxDEV","_jsxDEV","App","_s","today","todaysPage","variables","month","dayNum","day","number","year","dispatch","data","findPage","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/App.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { Page } from \"./components/Page\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCurrentPage } from \"./reducers/PageReducer\";\nimport { addPage } from \"./reducers/JournalReducer\";\nimport { getFormattedDate } from \"./utils/getFormattedDate\";\nimport { getTodaysPage } from \"./reducers/PageReducer\";\nimport { useQuery } from \"@apollo/client\";\nimport { FIND_PAGE } from \"./utils/queries\";\n\nfunction App() {\n  const today = getFormattedDate();\n  const todaysPage = useQuery(FIND_PAGE, {\n    variables: {\n      month: today.month,\n      dayNum: today.day.number,\n      year: today.year,\n    },\n  });\n  // const pages = useSelector((state) => state.journal.pages);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // if (pages) {\n    //   // get today's date\n    //   const today = getFormattedDate();\n    //   // check if there is a page for today\n    //   const page = pages.find(\n    //     (page) =>\n    //       page.date.year === today.year &&\n    //       page.date.month === today.month &&\n    //       page.date.day.number === today.day.number\n    //   );\n    //   if (page) {\n    //     // if there is a page for today, set it as the current page\n    //     dispatch(setCurrentPage(page));\n    //   } else {\n    //     // if there is no page for today, create a new page\n    //     dispatch(addPage(today));\n    //   }\n    // }\n    // dispatch(getTodaysPage());\n    if (todaysPage.data) {\n      dispatch(setCurrentPage(todaysPage.data.findPage));\n    } else {\n      dispatch(addPage(today));\n    }\n  }, [todaysPage]);\n\n  return (\n    <div>\n      <Page />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,SAAS,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,KAAK,GAAGR,gBAAgB,CAAC,CAAC;EAChC,MAAMS,UAAU,GAAGP,QAAQ,CAACC,SAAS,EAAE;IACrCO,SAAS,EAAE;MACTC,KAAK,EAAEH,KAAK,CAACG,KAAK;MAClBC,MAAM,EAAEJ,KAAK,CAACK,GAAG,CAACC,MAAM;MACxBC,IAAI,EAAEP,KAAK,CAACO;IACd;EACF,CAAC,CAAC;EACF;;EAEA,MAAMC,QAAQ,GAAGpB,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIe,UAAU,CAACQ,IAAI,EAAE;MACnBD,QAAQ,CAAClB,cAAc,CAACW,UAAU,CAACQ,IAAI,CAACC,QAAQ,CAAC,CAAC;IACpD,CAAC,MAAM;MACLF,QAAQ,CAACjB,OAAO,CAACS,KAAK,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACC,UAAU,CAAC,CAAC;EAEhB,oBACEJ,OAAA;IAAAc,QAAA,eACEd,OAAA,CAACV,IAAI;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAAChB,EAAA,CA7CQD,GAAG;EAAA,QAESJ,QAAQ,EASVN,WAAW;AAAA;AAAA4B,EAAA,GAXrBlB,GAAG;AA+CZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}