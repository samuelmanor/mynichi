{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/components/NavArrow/NavArrow.tsx\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\n// @ts-ignore\nimport { GET_AVAILABLE_PAGES } from \"../../utils/queries\";\nimport { useSelector } from \"react-redux\";\n// @ts-ignore\n\n// @ts-ignore\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NavArrow = () => {\n  _s();\n  // const dispatch = useDispatch();\n\n  const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector(state => state.currentPage);\n  const [prevPageIndex, setPrevPageIndex] = useState(null);\n  const [nextPageIndex, setNextPageIndex] = useState(null);\n  useEffect(() => {\n    if (availablePages.data) {\n      // find index of the current page within the available pages\n      const currentPageIndex = availablePages.data.getAvailablePages.findIndex(id => id === currentPage.id);\n      // if currentPageIndex is found, set the prevPageIndex and nextPageIndex\n      if (currentPageIndex !== -1) {\n        setPrevPageIndex(currentPageIndex > 0 ? currentPageIndex - 1 : null);\n        setNextPageIndex(currentPageIndex < availablePages.data.getAvailablePages.length - 1 ? currentPageIndex + 1 : null);\n      }\n    }\n  }, [availablePages.data, currentPage.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(NavArrow, \"AeNj6Q3+WV5Brv+SCQ8cjM/r27c=\", false, function () {\n  return [useQuery, useSelector];\n});\n_c = NavArrow;\nvar _c;\n$RefreshReg$(_c, \"NavArrow\");","map":{"version":3,"names":["useQuery","React","useEffect","useState","GET_AVAILABLE_PAGES","useSelector","jsxDEV","_jsxDEV","NavArrow","_s","availablePages","currentPage","state","prevPageIndex","setPrevPageIndex","nextPageIndex","setNextPageIndex","data","currentPageIndex","getAvailablePages","findIndex","id","length","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/components/NavArrow/NavArrow.tsx"],"sourcesContent":["import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { FC } from \"react\";\n// @ts-ignore\nimport { GET_AVAILABLE_PAGES, FIND_PAGE } from \"../../utils/queries\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// @ts-ignore\nimport { Page } from \"../../utils/gql\";\n// @ts-ignore\nimport { setCurrentPage } from \"../../reducers/PageReducer\";\n\ninterface NavArrowProps {}\n\nexport const NavArrow: FC<NavArrowProps> = () => {\n  // const dispatch = useDispatch();\n\n  const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector((state: any) => state.currentPage);\n\n  const [prevPageIndex, setPrevPageIndex] = useState<number | null>(null);\n  const [nextPageIndex, setNextPageIndex] = useState<number | null>(null);\n\n  useEffect(() => {\n    if (availablePages.data) {\n      // find index of the current page within the available pages\n      const currentPageIndex = availablePages.data.getAvailablePages.findIndex(\n        (id: string) => id === currentPage.id\n      );\n      // if currentPageIndex is found, set the prevPageIndex and nextPageIndex\n      if (currentPageIndex !== -1) {\n        setPrevPageIndex(currentPageIndex > 0 ? currentPageIndex - 1 : null);\n        setNextPageIndex(\n          currentPageIndex < availablePages.data.getAvailablePages.length - 1\n            ? currentPageIndex + 1\n            : null\n        );\n      }\n    }\n  }, [availablePages.data, currentPage.id]);\n\n  return (\n    <div>\n      {/* <button\n        style={{ display: prevPageIndex !== null ? \"\" : \"none\" }}\n        onClick={() => {\n          console.log(prevPageIndex);\n        }}\n      >\n        prev page\n      </button>\n      <button\n        style={{ display: nextPageIndex !== null ? \"\" : \"none\" }}\n        onClick={() => {\n          console.log(nextPageIndex);\n        }}\n      >\n        next page\n      </button> */}\n    </div>\n  );\n};\n"],"mappings":";;AAAA,SAAuBA,QAAQ,QAAQ,gBAAgB;AACvD,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD;AACA,SAASC,mBAAmB,QAAmB,qBAAqB;AACpE,SAAsBC,WAAW,QAAQ,aAAa;AACtD;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA,OAAO,MAAMC,QAA2B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/C;;EAEA,MAAMC,cAAc,GAAGV,QAAQ,CAACI,mBAAmB,CAAC;EACpD,MAAMO,WAAW,GAAGN,WAAW,CAAEO,KAAU,IAAKA,KAAK,CAACD,WAAW,CAAC;EAElE,MAAM,CAACE,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EACvE,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EAEvED,SAAS,CAAC,MAAM;IACd,IAAIQ,cAAc,CAACO,IAAI,EAAE;MACvB;MACA,MAAMC,gBAAgB,GAAGR,cAAc,CAACO,IAAI,CAACE,iBAAiB,CAACC,SAAS,CACrEC,EAAU,IAAKA,EAAE,KAAKV,WAAW,CAACU,EACrC,CAAC;MACD;MACA,IAAIH,gBAAgB,KAAK,CAAC,CAAC,EAAE;QAC3BJ,gBAAgB,CAACI,gBAAgB,GAAG,CAAC,GAAGA,gBAAgB,GAAG,CAAC,GAAG,IAAI,CAAC;QACpEF,gBAAgB,CACdE,gBAAgB,GAAGR,cAAc,CAACO,IAAI,CAACE,iBAAiB,CAACG,MAAM,GAAG,CAAC,GAC/DJ,gBAAgB,GAAG,CAAC,GACpB,IACN,CAAC;MACH;IACF;EACF,CAAC,EAAE,CAACR,cAAc,CAACO,IAAI,EAAEN,WAAW,CAACU,EAAE,CAAC,CAAC;EAEzC,oBACEd,OAAA;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAiBK,CAAC;AAEV,CAAC;AAACjB,EAAA,CA/CWD,QAA2B;EAAA,QAGfR,QAAQ,EACXK,WAAW;AAAA;AAAAsB,EAAA,GAJpBnB,QAA2B;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}