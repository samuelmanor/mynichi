{"ast":null,"code":"// uses given date to return a 2d array of the month's days\n\nexport const formatMonth = date => {\n  // const month = date.month;\n  // const year = date.year;\n  // const firstDay = new Date(year, month - 1, 1).getDay();\n  // const lastDay = new Date(year, month, 0).getDate();\n  // const monthArray: number[][] = [];\n  // let weekArray: number[] = [];\n  // let day = 1;\n\n  // for (let i = 0; i < firstDay; i++) {\n  //   weekArray.push(0);\n  // }\n\n  // while (day <= lastDay) {\n  //   weekArray.push(day);\n  //   day++;\n  //   if (weekArray.length === 7) {\n  //     monthArray.push(weekArray);\n  //     weekArray = [];\n  //   }\n  // }\n\n  // while (weekArray.length < 7) {\n  //   weekArray.push(0);\n  // }\n\n  // monthArray.push(weekArray);\n\n  console.log(monthArray);\n\n  // return monthArray;\n  return [[]];\n};","map":{"version":3,"names":["formatMonth","date","console","log","monthArray"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/utils/formatMonth.ts"],"sourcesContent":["// uses given date to return a 2d array of the month's days\n\nimport { Date } from \"./getFormattedDate\";\n\nexport const formatMonth = (date: Date): number[][] => {\n  // const month = date.month;\n  // const year = date.year;\n  // const firstDay = new Date(year, month - 1, 1).getDay();\n  // const lastDay = new Date(year, month, 0).getDate();\n  // const monthArray: number[][] = [];\n  // let weekArray: number[] = [];\n  // let day = 1;\n\n  // for (let i = 0; i < firstDay; i++) {\n  //   weekArray.push(0);\n  // }\n\n  // while (day <= lastDay) {\n  //   weekArray.push(day);\n  //   day++;\n  //   if (weekArray.length === 7) {\n  //     monthArray.push(weekArray);\n  //     weekArray = [];\n  //   }\n  // }\n\n  // while (weekArray.length < 7) {\n  //   weekArray.push(0);\n  // }\n\n  // monthArray.push(weekArray);\n\n  console.log(monthArray);\n\n  // return monthArray;\n  return [[]];\n};\n"],"mappings":"AAAA;;AAIA,OAAO,MAAMA,WAAW,GAAIC,IAAU,IAAiB;EACrD;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEAC,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;;EAEvB;EACA,OAAO,CAAC,EAAE,CAAC;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}