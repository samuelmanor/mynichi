{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/frontend/src/index.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\n// @ts-ignore\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\n// @ts-ignore\nimport store from \"./reducers/store\";\n// const { ApolloServer } = require(\"@apollo/server\");\n// const { startStandaloneServer } = require(\"@apollo/server/standalone\");\n// import { pages } from \"./reducers/JournalReducer\";\n\n// const typeDefs = `\n//   type Page {\n//     id: Int!\n//     date: {\n//     month: Int!\n//     day: {\n//       number: Int!\n//       name: String!\n//     }\n//     year: Int!\n//     }\n//   }\n\n//   type Query {\n//     pages: [Page!]!\n//     getPage(id: Int, date: {month: Int!, day: {number: Int!, name: String!}, year: Int!}): Page\n//   }\n// `;\n\n// const resolvers = {\n//   Query: {\n//     pages: () => pages,\n//     getPage: (parent, args) => {\n//       const { id, date } = args;\n//       if (id) {\n//         return pages.find((page) => page.id === id);\n//       } else {\n//         return pages.find(\n//           (page) =>\n//             page.date.year === date.year &&\n//             page.date.month === date.month &&\n//             page.date.day.number === date.day.number\n//         );\n//       }\n//     },\n//   },\n// };\n\n// const server = new ApolloServer({\n//   typeDefs,\n//   resolvers,\n// });\n\n// startStandaloneServer(server, {\n//   listen: { port: 4000 },\n// }).then(({ url }) => {\n//   console.log(`Server ready at ${url}`);\n// });\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000\",\n  cache: new InMemoryCache()\n});\nconst container = document.getElementById(\"root\");\nif (container) {\n  const root = ReactDOM.createRoot(container);\n  root.render(/*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsxDEV(React.StrictMode, {\n        children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this));\n} else {\n  console.error(\"Root container not found\");\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","Provider","store","ApolloClient","ApolloProvider","InMemoryCache","jsxDEV","_jsxDEV","client","uri","cache","container","document","getElementById","root","createRoot","render","children","StrictMode","fileName","_jsxFileName","lineNumber","columnNumber","console","error"],"sources":["/Users/smanor/Development/code/personal/mynichi/frontend/src/index.tsx"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\n// @ts-ignore\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\n// @ts-ignore\nimport store from \"./reducers/store\";\nimport { gql } from \"@apollo/client\";\n\n// const { ApolloServer } = require(\"@apollo/server\");\n// const { startStandaloneServer } = require(\"@apollo/server/standalone\");\n// import { pages } from \"./reducers/JournalReducer\";\n\n// const typeDefs = `\n//   type Page {\n//     id: Int!\n//     date: {\n//     month: Int!\n//     day: {\n//       number: Int!\n//       name: String!\n//     }\n//     year: Int!\n//     }\n//   }\n\n//   type Query {\n//     pages: [Page!]!\n//     getPage(id: Int, date: {month: Int!, day: {number: Int!, name: String!}, year: Int!}): Page\n//   }\n// `;\n\n// const resolvers = {\n//   Query: {\n//     pages: () => pages,\n//     getPage: (parent, args) => {\n//       const { id, date } = args;\n//       if (id) {\n//         return pages.find((page) => page.id === id);\n//       } else {\n//         return pages.find(\n//           (page) =>\n//             page.date.year === date.year &&\n//             page.date.month === date.month &&\n//             page.date.day.number === date.day.number\n//         );\n//       }\n//     },\n//   },\n// };\n\n// const server = new ApolloServer({\n//   typeDefs,\n//   resolvers,\n// });\n\n// startStandaloneServer(server, {\n//   listen: { port: 4000 },\n// }).then(({ url }) => {\n//   console.log(`Server ready at ${url}`);\n// });\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000\",\n  cache: new InMemoryCache(),\n});\n\nconst container = document.getElementById(\"root\");\nif (container) {\n  const root = ReactDOM.createRoot(container);\n  root.render(\n    <ApolloProvider client={client}>\n      <Provider store={store}>\n        <React.StrictMode>\n          <App />\n        </React.StrictMode>\n      </Provider>\n    </ApolloProvider>\n  );\n} else {\n  console.error(\"Root container not found\");\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB;AACA,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,QAAQ,QAAQ,aAAa;AACtC;AACA,OAAOC,KAAK,MAAM,kBAAkB;AAGpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAASC,YAAY,EAAEC,cAAc,EAAEC,aAAa,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7E,MAAMC,MAAM,GAAG,IAAIL,YAAY,CAAC;EAC9BM,GAAG,EAAE,uBAAuB;EAC5BC,KAAK,EAAE,IAAIL,aAAa,CAAC;AAC3B,CAAC,CAAC;AAEF,MAAMM,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;AACjD,IAAIF,SAAS,EAAE;EACb,MAAMG,IAAI,GAAGf,QAAQ,CAACgB,UAAU,CAACJ,SAAS,CAAC;EAC3CG,IAAI,CAACE,MAAM,cACTT,OAAA,CAACH,cAAc;IAACI,MAAM,EAAEA,MAAO;IAAAS,QAAA,eAC7BV,OAAA,CAACN,QAAQ;MAACC,KAAK,EAAEA,KAAM;MAAAe,QAAA,eACrBV,OAAA,CAACT,KAAK,CAACoB,UAAU;QAAAD,QAAA,eACfV,OAAA,CAACP,GAAG;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACS;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAClB,CAAC;AACH,CAAC,MAAM;EACLC,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;AAC3C;;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}