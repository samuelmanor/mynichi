{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/frontend/src/components/NavArrow/NavArrow.tsx\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"@apollo/client\";\nimport React from \"react\";\n// @ts-ignore\nimport { GET_NEXT_PAGE, GET_PREVIOUS_PAGE } from \"../../utils/queries\";\n// @ts-ignore\n\nimport { useDispatch, useSelector } from \"react-redux\";\n// @ts-ignore\nimport { setCurrentPage } from \"../../reducers/PageReducer\";\nimport { getFormattedDate } from \"../../utils/getFormattedDate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NavArrow = () => {\n  _s();\n  const dispatch = useDispatch();\n  const today = getFormattedDate();\n  const currentPage = useSelector(state => state.currentPage);\n  const previousPage = useQuery(GET_PREVIOUS_PAGE, {\n    variables: {\n      id: currentPage.id\n    }\n  });\n  const nextPage = useQuery(GET_NEXT_PAGE, {\n    variables: {\n      id: currentPage.id\n    }\n  });\n  const setPreviousPage = () => {\n    if (previousPage.data.getPreviousPage.page !== null) {\n      dispatch(setCurrentPage(previousPage.data.getPreviousPage.page));\n    }\n  };\n  const setNextPage = () => {\n    if (nextPage.data.getNextPage.page !== null) {\n      dispatch(setCurrentPage(nextPage.data.getNextPage.page));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: setPreviousPage,\n      children: \"get previous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(currentPage),\n      children: \"current\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: setNextPage,\n      children: \"get next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(NavArrow, \"5zVd0Bt+uOElOIVGkFTSHypzz3A=\", false, function () {\n  return [useDispatch, useSelector, useQuery, useQuery];\n});\n_c = NavArrow;\nvar _c;\n$RefreshReg$(_c, \"NavArrow\");","map":{"version":3,"names":["useQuery","React","GET_NEXT_PAGE","GET_PREVIOUS_PAGE","useDispatch","useSelector","setCurrentPage","getFormattedDate","jsxDEV","_jsxDEV","NavArrow","_s","dispatch","today","currentPage","state","previousPage","variables","id","nextPage","setPreviousPage","data","getPreviousPage","page","setNextPage","getNextPage","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","console","log","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/frontend/src/components/NavArrow/NavArrow.tsx"],"sourcesContent":["import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { FC } from \"react\";\n// @ts-ignore\nimport { GET_NEXT_PAGE, GET_PREVIOUS_PAGE } from \"../../utils/queries\";\n// @ts-ignore\nimport { FIND_PAGE } from \"../../utils/queries\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// @ts-ignore\nimport { setCurrentPage } from \"../../reducers/PageReducer\";\nimport { getFormattedDate } from \"../../utils/getFormattedDate\";\n\ninterface NavArrowProps {}\n\nexport const NavArrow: FC<NavArrowProps> = () => {\n  const dispatch = useDispatch();\n\n  const today = getFormattedDate();\n\n  const currentPage = useSelector((state: any) => state.currentPage);\n\n  const previousPage = useQuery(GET_PREVIOUS_PAGE, {\n    variables: { id: currentPage.id },\n  });\n\n  const nextPage = useQuery(GET_NEXT_PAGE, {\n    variables: { id: currentPage.id },\n  });\n\n  const setPreviousPage = () => {\n    if (previousPage.data.getPreviousPage.page !== null) {\n      dispatch(setCurrentPage(previousPage.data.getPreviousPage.page));\n    }\n  };\n\n  const setNextPage = () => {\n    if (nextPage.data.getNextPage.page !== null) {\n      dispatch(setCurrentPage(nextPage.data.getNextPage.page));\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={setPreviousPage}>get previous</button>\n      <button onClick={() => console.log(currentPage)}>current</button>\n      <button onClick={setNextPage}>get next</button>\n    </div>\n  );\n};\n"],"mappings":";;AAAA,SAAuBA,QAAQ,QAAQ,gBAAgB;AACvD,OAAOC,KAAK,MAA+B,OAAO;AAElD;AACA,SAASC,aAAa,EAAEC,iBAAiB,QAAQ,qBAAqB;AACtE;;AAEA,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD;AACA,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,gBAAgB,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIhE,OAAO,MAAMC,QAA2B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/C,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAMS,KAAK,GAAGN,gBAAgB,CAAC,CAAC;EAEhC,MAAMO,WAAW,GAAGT,WAAW,CAAEU,KAAU,IAAKA,KAAK,CAACD,WAAW,CAAC;EAElE,MAAME,YAAY,GAAGhB,QAAQ,CAACG,iBAAiB,EAAE;IAC/Cc,SAAS,EAAE;MAAEC,EAAE,EAAEJ,WAAW,CAACI;IAAG;EAClC,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAGnB,QAAQ,CAACE,aAAa,EAAE;IACvCe,SAAS,EAAE;MAAEC,EAAE,EAAEJ,WAAW,CAACI;IAAG;EAClC,CAAC,CAAC;EAEF,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIJ,YAAY,CAACK,IAAI,CAACC,eAAe,CAACC,IAAI,KAAK,IAAI,EAAE;MACnDX,QAAQ,CAACN,cAAc,CAACU,YAAY,CAACK,IAAI,CAACC,eAAe,CAACC,IAAI,CAAC,CAAC;IAClE;EACF,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIL,QAAQ,CAACE,IAAI,CAACI,WAAW,CAACF,IAAI,KAAK,IAAI,EAAE;MAC3CX,QAAQ,CAACN,cAAc,CAACa,QAAQ,CAACE,IAAI,CAACI,WAAW,CAACF,IAAI,CAAC,CAAC;IAC1D;EACF,CAAC;EAED,oBACEd,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAQkB,OAAO,EAAEP,eAAgB;MAAAM,QAAA,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvDtB,OAAA;MAAQkB,OAAO,EAAEA,CAAA,KAAMK,OAAO,CAACC,GAAG,CAACnB,WAAW,CAAE;MAAAY,QAAA,EAAC;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACjEtB,OAAA;MAAQkB,OAAO,EAAEH,WAAY;MAAAE,QAAA,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV,CAAC;AAACpB,EAAA,CAlCWD,QAA2B;EAAA,QACrBN,WAAW,EAIRC,WAAW,EAEVL,QAAQ,EAIZA,QAAQ;AAAA;AAAAkC,EAAA,GAXdxB,QAA2B;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}