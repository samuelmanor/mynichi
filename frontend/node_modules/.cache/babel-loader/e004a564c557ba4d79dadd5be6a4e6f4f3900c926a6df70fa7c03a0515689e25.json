{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { Page } from \"./components/Page\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCurrentPage } from \"./reducers/PageReducer\";\nimport { addPage } from \"./reducers/JournalReducer\";\nimport { getFormattedDate } from \"./utils/getFormattedDate\";\nimport { getTodaysPage } from \"./reducers/PageReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const pages = useSelector((state) => state.journal.pages);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // if (pages) {\n    //   // get today's date\n    //   const today = getFormattedDate();\n    //   // check if there is a page for today\n    //   const page = pages.find(\n    //     (page) =>\n    //       page.date.year === today.year &&\n    //       page.date.month === today.month &&\n    //       page.date.day.number === today.day.number\n    //   );\n    //   if (page) {\n    //     // if there is a page for today, set it as the current page\n    //     dispatch(setCurrentPage(page));\n    //   } else {\n    //     // if there is no page for today, create a new page\n    //     dispatch(addPage(today));\n    //   }\n    // }\n    dispatch(getTodaysPage());\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Page, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","Page","useDispatch","useSelector","setCurrentPage","addPage","getFormattedDate","getTodaysPage","jsxDEV","_jsxDEV","App","_s","dispatch","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/App.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { Page } from \"./components/Page\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCurrentPage } from \"./reducers/PageReducer\";\nimport { addPage } from \"./reducers/JournalReducer\";\nimport { getFormattedDate } from \"./utils/getFormattedDate\";\nimport { getTodaysPage } from \"./reducers/PageReducer\";\n\nfunction App() {\n  // const pages = useSelector((state) => state.journal.pages);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // if (pages) {\n    //   // get today's date\n    //   const today = getFormattedDate();\n    //   // check if there is a page for today\n    //   const page = pages.find(\n    //     (page) =>\n    //       page.date.year === today.year &&\n    //       page.date.month === today.month &&\n    //       page.date.day.number === today.day.number\n    //   );\n    //   if (page) {\n    //     // if there is a page for today, set it as the current page\n    //     dispatch(setCurrentPage(page));\n    //   } else {\n    //     // if there is no page for today, create a new page\n    //     dispatch(addPage(today));\n    //   }\n    // }\n    dispatch(getTodaysPage());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Page />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,aAAa,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;;EAEA,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAY,QAAQ,CAACL,aAAa,CAAC,CAAC,CAAC;EAC3B,CAAC,EAAE,CAACK,QAAQ,CAAC,CAAC;EAEd,oBACEH,OAAA;IAAAI,QAAA,eACEJ,OAAA,CAACR,IAAI;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAACN,EAAA,CAhCQD,GAAG;EAAA,QAGOR,WAAW;AAAA;AAAAgB,EAAA,GAHrBR,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}