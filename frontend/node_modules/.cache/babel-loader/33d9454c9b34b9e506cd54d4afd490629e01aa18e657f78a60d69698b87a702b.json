{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/frontend/src/components/NavArrow/NavArrow.tsx\",\n  _s = $RefreshSig$();\nimport { useLazyQuery } from \"@apollo/client\";\nimport React, { useState } from \"react\";\n// @ts-ignore\nimport { GET_NEXT_PAGE, GET_PREVIOUS_PAGE } from \"../../utils/queries\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// @ts-ignore\nimport { setCurrentPage } from \"../../reducers/PageReducer\";\nimport { getFormattedDate } from \"../../utils/getFormattedDate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NavArrow = () => {\n  _s();\n  const [onLastPage, setOnLastPage] = useState(false);\n  const [onFirstPage, setOnFirstPage] = useState(true);\n  const dispatch = useDispatch();\n  const today = getFormattedDate();\n\n  // const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector(state => state.currentPage);\n  const [getNextPage] = useLazyQuery(GET_NEXT_PAGE, {\n    variables: {\n      id: currentPage.id\n    },\n    onCompleted: data => {\n      if (data.getNextPage) {\n        // dispatch(setCurrentPage(data.getNextPage));\n        console.log(data.getNextPage);\n        if (data.getNextPage.isEnd) {\n          setOnLastPage(true);\n        }\n        dispatch(setCurrentPage(data.getNextPage.page));\n      }\n    }\n  });\n  const [getPreviousPage] = useLazyQuery(GET_PREVIOUS_PAGE, {\n    variables: {\n      id: currentPage.id\n    },\n    onCompleted: data => {\n      if (data.getPreviousPage) {\n        // dispatch(setCurrentPage(data.getPreviousPage));\n        console.log(data.getPreviousPage);\n        if (data.getPreviousPage.isEnd) {\n          setOnFirstPage(true);\n        }\n        dispatch(setCurrentPage(data.getPreviousPage.page));\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => getPreviousPage(),\n      children: \"get previous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(currentPage),\n      children: \"current\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => getNextPage(),\n      children: \"get next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(NavArrow, \"NCmfy+g92rsHOzcGTnj5KwPlFKY=\", false, function () {\n  return [useDispatch, useSelector, useLazyQuery, useLazyQuery];\n});\n_c = NavArrow;\nvar _c;\n$RefreshReg$(_c, \"NavArrow\");","map":{"version":3,"names":["useLazyQuery","React","useState","GET_NEXT_PAGE","GET_PREVIOUS_PAGE","useDispatch","useSelector","setCurrentPage","getFormattedDate","jsxDEV","_jsxDEV","NavArrow","_s","onLastPage","setOnLastPage","onFirstPage","setOnFirstPage","dispatch","today","currentPage","state","getNextPage","variables","id","onCompleted","data","console","log","isEnd","page","getPreviousPage","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/frontend/src/components/NavArrow/NavArrow.tsx"],"sourcesContent":["import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { FC } from \"react\";\n// @ts-ignore\nimport { GET_NEXT_PAGE, GET_PREVIOUS_PAGE } from \"../../utils/queries\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// @ts-ignore\nimport { setCurrentPage } from \"../../reducers/PageReducer\";\nimport { getFormattedDate } from \"../../utils/getFormattedDate\";\n\ninterface NavArrowProps {}\n\nexport const NavArrow: FC<NavArrowProps> = () => {\n  const [onLastPage, setOnLastPage] = useState(false);\n  const [onFirstPage, setOnFirstPage] = useState(true);\n\n  const dispatch = useDispatch();\n\n  const today = getFormattedDate();\n\n  // const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector((state: any) => state.currentPage);\n\n  const [getNextPage] = useLazyQuery(GET_NEXT_PAGE, {\n    variables: { id: currentPage.id },\n    onCompleted: (data) => {\n      if (data.getNextPage) {\n        // dispatch(setCurrentPage(data.getNextPage));\n        console.log(data.getNextPage);\n        if (data.getNextPage.isEnd) {\n          setOnLastPage(true);\n        }\n        dispatch(setCurrentPage(data.getNextPage.page));\n      }\n    },\n  });\n\n  const [getPreviousPage] = useLazyQuery(GET_PREVIOUS_PAGE, {\n    variables: { id: currentPage.id },\n    onCompleted: (data) => {\n      if (data.getPreviousPage) {\n        // dispatch(setCurrentPage(data.getPreviousPage));\n        console.log(data.getPreviousPage);\n        if (data.getPreviousPage.isEnd) {\n          setOnFirstPage(true);\n        }\n        dispatch(setCurrentPage(data.getPreviousPage.page));\n      }\n    },\n  });\n\n  return (\n    <div>\n      <button onClick={() => getPreviousPage()}>get previous</button>\n      <button onClick={() => console.log(currentPage)}>current</button>\n      <button onClick={() => getNextPage()}>get next</button>\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}