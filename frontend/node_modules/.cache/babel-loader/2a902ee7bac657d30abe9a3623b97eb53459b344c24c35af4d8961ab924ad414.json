{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./reducers/store\";\n\n// const { ApolloServer } = require(\"@apollo/server\");\n// const { startStandaloneServer } = require(\"@apollo/server/standalone\");\n// import { pages } from \"./reducers/JournalReducer\";\n\n// const typeDefs = `\n//   type Page {\n//     id: Int!\n//     date: {\n//     month: Int!\n//     day: {\n//       number: Int!\n//       name: String!\n//     }\n//     year: Int!\n//     }\n//   }\n\n//   type Query {\n//     pages: [Page!]!\n//     getPage(id: Int, date: {month: Int!, day: {number: Int!, name: String!}, year: Int!}): Page\n//   }\n// `;\n\n// const resolvers = {\n//   Query: {\n//     pages: () => pages,\n//     getPage: (parent, args) => {\n//       const { id, date } = args;\n//       if (id) {\n//         return pages.find((page) => page.id === id);\n//       } else {\n//         return pages.find(\n//           (page) =>\n//             page.date.year === date.year &&\n//             page.date.month === date.month &&\n//             page.date.day.number === date.day.number\n//         );\n//       }\n//     },\n//   },\n// };\n\n// const server = new ApolloServer({\n//   typeDefs,\n//   resolvers,\n// });\n\n// startStandaloneServer(server, {\n//   listen: { port: 4000 },\n// }).then(({ url }) => {\n//   console.log(`Server ready at ${url}`);\n// });\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(/*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 64,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","Provider","store","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","children","StrictMode","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./reducers/store\";\n\n// const { ApolloServer } = require(\"@apollo/server\");\n// const { startStandaloneServer } = require(\"@apollo/server/standalone\");\n// import { pages } from \"./reducers/JournalReducer\";\n\n// const typeDefs = `\n//   type Page {\n//     id: Int!\n//     date: {\n//     month: Int!\n//     day: {\n//       number: Int!\n//       name: String!\n//     }\n//     year: Int!\n//     }\n//   }\n\n//   type Query {\n//     pages: [Page!]!\n//     getPage(id: Int, date: {month: Int!, day: {number: Int!, name: String!}, year: Int!}): Page\n//   }\n// `;\n\n// const resolvers = {\n//   Query: {\n//     pages: () => pages,\n//     getPage: (parent, args) => {\n//       const { id, date } = args;\n//       if (id) {\n//         return pages.find((page) => page.id === id);\n//       } else {\n//         return pages.find(\n//           (page) =>\n//             page.date.year === date.year &&\n//             page.date.month === date.month &&\n//             page.date.day.number === date.day.number\n//         );\n//       }\n//     },\n//   },\n// };\n\n// const server = new ApolloServer({\n//   typeDefs,\n//   resolvers,\n// });\n\n// startStandaloneServer(server, {\n//   listen: { port: 4000 },\n// }).then(({ url }) => {\n//   console.log(`Server ready at ${url}`);\n// });\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,KAAK,MAAM,kBAAkB;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,IAAI,GAAGP,QAAQ,CAACQ,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,cACTL,OAAA,CAACH,QAAQ;EAACC,KAAK,EAAEA,KAAM;EAAAQ,QAAA,eACrBN,OAAA,CAACP,KAAK,CAACc,UAAU;IAAAD,QAAA,eACfN,OAAA,CAACL,GAAG;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACX,CACZ,CAAC;;AAED;AACA;AACA;AACAf,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}