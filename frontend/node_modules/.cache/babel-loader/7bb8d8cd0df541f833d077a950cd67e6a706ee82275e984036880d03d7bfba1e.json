{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { getFormattedDate } from \"../utils/getFormattedDate\";\n\n// const initialState = {\n//   id: 0,\n//   date: {\n//     month: 0,\n//     day: {\n//       number: 0,\n//       name: \"\",\n//     },\n//     year: 0,\n//   },\n// };\n\nconst pageSlice = createSlice({\n  name: \"pages\",\n  initialState: {\n    currentPage: {\n      id: 0,\n      date: {\n        day: {\n          name: \"\",\n          number: 0\n        },\n        month: 0,\n        year: 0\n      }\n    },\n    pageCount: 0\n  },\n  reducers: {\n    getTodaysPage(state, action) {\n      // console.log(\"getTodaysPage\", action.payload);\n      // state.currentPage = action.payload;\n      // get today's date\n      const today = getFormattedDate();\n      const page = state.pages.find(page => {\n        return page.date.year === today.year && page.date.month === today.month && page.date.day.number === today.day.number;\n      });\n    },\n    setCurrentPage(state, action) {\n      console.log(\"setCurrentPage\", action.payload);\n      state.id = action.payload.id;\n      state.date = action.payload.date;\n    }\n  }\n});\nexport const {\n  setCurrentPage\n} = pageSlice.actions;\nexport default pageSlice.reducer;\n\n// if (pages) {\n//   // get today's date\n//   const today = getFormattedDate();\n//   // check if there is a page for today\n//   const page = pages.find(\n//     (page) =>\n//       page.date.year === today.year &&\n//       page.date.month === today.month &&\n//       page.date.day.number === today.day.number\n//   );\n//   if (page) {\n//     // if there is a page for today, set it as the current page\n//     dispatch(setCurrentPage(page));\n//   } else {\n//     // if there is no page for today, create a new page\n//     dispatch(addPage(today));\n//   }\n// }","map":{"version":3,"names":["createSlice","getFormattedDate","pageSlice","name","initialState","currentPage","id","date","day","number","month","year","pageCount","reducers","getTodaysPage","state","action","today","page","pages","find","setCurrentPage","console","log","payload","actions","reducer"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/reducers/PageReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { getFormattedDate } from \"../utils/getFormattedDate\";\n\n// const initialState = {\n//   id: 0,\n//   date: {\n//     month: 0,\n//     day: {\n//       number: 0,\n//       name: \"\",\n//     },\n//     year: 0,\n//   },\n// };\n\nconst pageSlice = createSlice({\n  name: \"pages\",\n  initialState: {\n    currentPage: {\n      id: 0,\n      date: {\n        day: {\n          name: \"\",\n          number: 0,\n        },\n        month: 0,\n        year: 0,\n      },\n    },\n    pageCount: 0,\n  },\n  reducers: {\n    getTodaysPage(state, action) {\n      // console.log(\"getTodaysPage\", action.payload);\n      // state.currentPage = action.payload;\n      // get today's date\n      const today = getFormattedDate();\n\n      const page = state.pages.find((page) => {\n        return (\n          page.date.year === today.year &&\n          page.date.month === today.month &&\n          page.date.day.number === today.day.number\n        );\n      });\n    },\n    setCurrentPage(state, action) {\n      console.log(\"setCurrentPage\", action.payload);\n      state.id = action.payload.id;\n      state.date = action.payload.date;\n    },\n  },\n});\n\nexport const { setCurrentPage } = pageSlice.actions;\n\nexport default pageSlice.reducer;\n\n// if (pages) {\n//   // get today's date\n//   const today = getFormattedDate();\n//   // check if there is a page for today\n//   const page = pages.find(\n//     (page) =>\n//       page.date.year === today.year &&\n//       page.date.month === today.month &&\n//       page.date.day.number === today.day.number\n//   );\n//   if (page) {\n//     // if there is a page for today, set it as the current page\n//     dispatch(setCurrentPage(page));\n//   } else {\n//     // if there is no page for today, create a new page\n//     dispatch(addPage(today));\n//   }\n// }\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,gBAAgB,QAAQ,2BAA2B;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC5BG,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,WAAW,EAAE;MACXC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE;QACJC,GAAG,EAAE;UACHL,IAAI,EAAE,EAAE;UACRM,MAAM,EAAE;QACV,CAAC;QACDC,KAAK,EAAE,CAAC;QACRC,IAAI,EAAE;MACR;IACF,CAAC;IACDC,SAAS,EAAE;EACb,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAaA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC3B;MACA;MACA;MACA,MAAMC,KAAK,GAAGhB,gBAAgB,CAAC,CAAC;MAEhC,MAAMiB,IAAI,GAAGH,KAAK,CAACI,KAAK,CAACC,IAAI,CAAEF,IAAI,IAAK;QACtC,OACEA,IAAI,CAACX,IAAI,CAACI,IAAI,KAAKM,KAAK,CAACN,IAAI,IAC7BO,IAAI,CAACX,IAAI,CAACG,KAAK,KAAKO,KAAK,CAACP,KAAK,IAC/BQ,IAAI,CAACX,IAAI,CAACC,GAAG,CAACC,MAAM,KAAKQ,KAAK,CAACT,GAAG,CAACC,MAAM;MAE7C,CAAC,CAAC;IACJ,CAAC;IACDY,cAAcA,CAACN,KAAK,EAAEC,MAAM,EAAE;MAC5BM,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEP,MAAM,CAACQ,OAAO,CAAC;MAC7CT,KAAK,CAACT,EAAE,GAAGU,MAAM,CAACQ,OAAO,CAAClB,EAAE;MAC5BS,KAAK,CAACR,IAAI,GAAGS,MAAM,CAACQ,OAAO,CAACjB,IAAI;IAClC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEc;AAAe,CAAC,GAAGnB,SAAS,CAACuB,OAAO;AAEnD,eAAevB,SAAS,CAACwB,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}