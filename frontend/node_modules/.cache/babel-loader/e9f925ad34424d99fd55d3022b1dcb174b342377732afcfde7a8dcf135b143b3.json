{"ast":null,"code":"/**\n * Returns the current date in the format of the FormattedDate type.\n * @returns { FormattedDate } The current date.\n * @example\n * ```\n * const date = getFormattedDate();\n * console.log(date);\n * // {\n * //   month: 11,\n * //   week: 5,\n * //   day: {\n * //     number: 26,\n * //     name: \"tue\"\n * //   },\n * //   year: 2024\n * // }\n * ```\n */\n// declare global {\n//   interface Date {\n//     getWeekOfMonth(): number;\n//   }\n// }\n\n// Date.prototype.getWeekOfMonth = function (): number {\n//   var firstWeekday = new Date(this.getFullYear(), this.getMonth(), 1).getDay();\n//   var offsetDate = this.getDate() + firstWeekday - 1;\n//   return Math.floor(offsetDate / 7) + 1;\n// };\n\nexport const getFormattedDate = () => {\n  const today = new Date();\n  return {\n    day: {\n      number: today.getDate(),\n      name: today.toDateString().split(\" \")[0].toLowerCase()\n    },\n    month: today.getMonth() + 1,\n    year: today.getFullYear(),\n    // week: today.getWeekOfMonth(),\n    week: Math.ceil(today.getDate() / 7)\n  };\n};","map":{"version":3,"names":["getFormattedDate","today","Date","day","number","getDate","name","toDateString","split","toLowerCase","month","getMonth","year","getFullYear","week","Math","ceil"],"sources":["/Users/smanor/Development/code/personal/mynichi/frontend/src/utils/getFormattedDate.ts"],"sourcesContent":["export type FormattedDate = {\n  month: number;\n  week: number;\n  day: {\n    number: number;\n    name: string;\n  };\n  year: number;\n};\n\n/**\n * Returns the current date in the format of the FormattedDate type.\n * @returns { FormattedDate } The current date.\n * @example\n * ```\n * const date = getFormattedDate();\n * console.log(date);\n * // {\n * //   month: 11,\n * //   week: 5,\n * //   day: {\n * //     number: 26,\n * //     name: \"tue\"\n * //   },\n * //   year: 2024\n * // }\n * ```\n */\n// declare global {\n//   interface Date {\n//     getWeekOfMonth(): number;\n//   }\n// }\n\n// Date.prototype.getWeekOfMonth = function (): number {\n//   var firstWeekday = new Date(this.getFullYear(), this.getMonth(), 1).getDay();\n//   var offsetDate = this.getDate() + firstWeekday - 1;\n//   return Math.floor(offsetDate / 7) + 1;\n// };\n\nexport const getFormattedDate = (): FormattedDate => {\n  const today = new Date();\n\n  return {\n    day: {\n      number: today.getDate(),\n      name: today.toDateString().split(\" \")[0].toLowerCase(),\n    },\n    month: today.getMonth() + 1,\n    year: today.getFullYear(),\n    // week: today.getWeekOfMonth(),\n    week: Math.ceil(today.getDate() / 7),\n  };\n};\n"],"mappings":"AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,gBAAgB,GAAGA,CAAA,KAAqB;EACnD,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EAExB,OAAO;IACLC,GAAG,EAAE;MACHC,MAAM,EAAEH,KAAK,CAACI,OAAO,CAAC,CAAC;MACvBC,IAAI,EAAEL,KAAK,CAACM,YAAY,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC;IACvD,CAAC;IACDC,KAAK,EAAET,KAAK,CAACU,QAAQ,CAAC,CAAC,GAAG,CAAC;IAC3BC,IAAI,EAAEX,KAAK,CAACY,WAAW,CAAC,CAAC;IACzB;IACAC,IAAI,EAAEC,IAAI,CAACC,IAAI,CAACf,KAAK,CAACI,OAAO,CAAC,CAAC,GAAG,CAAC;EACrC,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}