{"ast":null,"code":"// uses given date to return a 2d array of the month's days\n\n/**\n * Uses the given date to return a 2d array of the month's days.\n * @param {FormattedDate} date The date to format.\n * @returns {number[][]} A 2d array of the month's days.\n */\nexport const formatMonth = date => {\n  console.log(date);\n  const month = date.month;\n  const year = date.year;\n  /** The day of the week that the first day of the month falls on. 0 is Sunday, 6 is Saturday. */\n  const firstDayPosition = new Date(year, month - 1, 1).getDay();\n  /** The total number of days in the given month. */\n  const daysInMonth = new Date(year, month, 0).getDate();\n  console.log(firstDayPosition, daysInMonth);\n  const weeksInMonth = Math.ceil((daysInMonth + firstDayPosition) / 7);\n\n  // example of what the array should look like:\n  // [\n  //   [0, 0, 0, 0, 0, 1, 2],\n  //   [3, 4, 5, 6, 7, 8, 9],\n  //   [10, 11, 12, 13, 14, 15, 16],\n  //   [17, 18, 19, 20, 21, 22, 23],\n  //   [24, 25, 26, 27, 28, 29, 30]\n  // ]\n\n  let monthArray = [];\n  let weekArray = [];\n\n  // fill in the first week with 0s until the first day of the month\n  for (let i = 0; i < firstDayPosition; i++) {\n    weekArray.push(0);\n  }\n\n  // fill in the rest of the days of the month\n  for (let i = 1; i <= daysInMonth; i++) {\n    weekArray.push(i);\n    if (weekArray.length === 7) {\n      monthArray.push(weekArray);\n      weekArray = [];\n    }\n  }\n\n  // fill in the last week with 0s until the end of the week, if necessary\n  if (monthArray.length < weeksInMonth) {\n    while (weekArray.length < 7) {\n      weekArray.push(0);\n    }\n    monthArray.push(weekArray);\n  }\n  return monthArray;\n};","map":{"version":3,"names":["formatMonth","date","console","log","month","year","firstDayPosition","Date","getDay","daysInMonth","getDate","weeksInMonth","Math","ceil","monthArray","weekArray","i","push","length"],"sources":["/Users/smanor/Development/code/personal/mynichi/frontend/src/utils/formatMonth.ts"],"sourcesContent":["// uses given date to return a 2d array of the month's days\n\nimport { FormattedDate } from \"./getFormattedDate\";\n\n/**\n * Uses the given date to return a 2d array of the month's days.\n * @param {FormattedDate} date The date to format.\n * @returns {number[][]} A 2d array of the month's days.\n */\nexport const formatMonth = (date: FormattedDate): number[][] => {\n  console.log(date);\n  const month = date.month;\n  const year = date.year;\n  /** The day of the week that the first day of the month falls on. 0 is Sunday, 6 is Saturday. */\n  const firstDayPosition = new Date(year, month - 1, 1).getDay();\n  /** The total number of days in the given month. */\n  const daysInMonth = new Date(year, month, 0).getDate();\n  console.log(firstDayPosition, daysInMonth);\n\n  const weeksInMonth = Math.ceil((daysInMonth + firstDayPosition) / 7);\n\n  // example of what the array should look like:\n  // [\n  //   [0, 0, 0, 0, 0, 1, 2],\n  //   [3, 4, 5, 6, 7, 8, 9],\n  //   [10, 11, 12, 13, 14, 15, 16],\n  //   [17, 18, 19, 20, 21, 22, 23],\n  //   [24, 25, 26, 27, 28, 29, 30]\n  // ]\n\n  let monthArray: number[][] = [];\n  let weekArray: number[] = [];\n\n  // fill in the first week with 0s until the first day of the month\n  for (let i = 0; i < firstDayPosition; i++) {\n    weekArray.push(0);\n  }\n\n  // fill in the rest of the days of the month\n  for (let i = 1; i <= daysInMonth; i++) {\n    weekArray.push(i);\n    if (weekArray.length === 7) {\n      monthArray.push(weekArray);\n      weekArray = [];\n    }\n  }\n\n  // fill in the last week with 0s until the end of the week, if necessary\n  if (monthArray.length < weeksInMonth) {\n    while (weekArray.length < 7) {\n      weekArray.push(0);\n    }\n    monthArray.push(weekArray);\n  }\n\n  return monthArray;\n};\n"],"mappings":"AAAA;;AAIA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,WAAW,GAAIC,IAAmB,IAAiB;EAC9DC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB,MAAMG,KAAK,GAAGH,IAAI,CAACG,KAAK;EACxB,MAAMC,IAAI,GAAGJ,IAAI,CAACI,IAAI;EACtB;EACA,MAAMC,gBAAgB,GAAG,IAAIC,IAAI,CAACF,IAAI,EAAED,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAACI,MAAM,CAAC,CAAC;EAC9D;EACA,MAAMC,WAAW,GAAG,IAAIF,IAAI,CAACF,IAAI,EAAED,KAAK,EAAE,CAAC,CAAC,CAACM,OAAO,CAAC,CAAC;EACtDR,OAAO,CAACC,GAAG,CAACG,gBAAgB,EAAEG,WAAW,CAAC;EAE1C,MAAME,YAAY,GAAGC,IAAI,CAACC,IAAI,CAAC,CAACJ,WAAW,GAAGH,gBAAgB,IAAI,CAAC,CAAC;;EAEpE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAIQ,UAAsB,GAAG,EAAE;EAC/B,IAAIC,SAAmB,GAAG,EAAE;;EAE5B;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,gBAAgB,EAAEU,CAAC,EAAE,EAAE;IACzCD,SAAS,CAACE,IAAI,CAAC,CAAC,CAAC;EACnB;;EAEA;EACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIP,WAAW,EAAEO,CAAC,EAAE,EAAE;IACrCD,SAAS,CAACE,IAAI,CAACD,CAAC,CAAC;IACjB,IAAID,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1BJ,UAAU,CAACG,IAAI,CAACF,SAAS,CAAC;MAC1BA,SAAS,GAAG,EAAE;IAChB;EACF;;EAEA;EACA,IAAID,UAAU,CAACI,MAAM,GAAGP,YAAY,EAAE;IACpC,OAAOI,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MAC3BH,SAAS,CAACE,IAAI,CAAC,CAAC,CAAC;IACnB;IACAH,UAAU,CAACG,IAAI,CAACF,SAAS,CAAC;EAC5B;EAEA,OAAOD,UAAU;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}