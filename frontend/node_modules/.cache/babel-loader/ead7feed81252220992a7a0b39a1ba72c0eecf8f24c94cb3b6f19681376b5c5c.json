{"ast":null,"code":"import { gql } from \"@apollo/client\";\nconst entirePage = `\n  id\n  date {\n    month\n    day {\n      number\n      name\n    }\n    week\n    year\n  }\n`;\nexport const FIND_PAGE = gql`\n  query findPage($month: Int, $dayNum: Int, $year: Int, $id: String) {\n    findPage(month: $month, dayNum: $dayNum, year: $year, id: $id) {\n      ${entirePage}\n    }\n  }\n`;\nexport const GET_PAGE_COUNT = gql`\n  query {\n    pageCount\n  }\n`;\n\n/**\n * Searches for an existing page with today's date, and if it doesn't exist, creates a new page with that date.\n */\nexport const ADD_PAGE = gql`\n  mutation addPage {\n    addPage {\n      ${entirePage}\n    }\n  }\n`;\n\n/**\n * Searches for the pave saved previous to the one with the given id.\n */\nexport const GET_PREVIOUS_PAGE = gql`\n  query getPreviousPage($id: String!) {\n    getPreviousPage(id: $id) {\n      page {\n        ${entirePage}\n      }\n      isEnd\n    }\n  }\n`;\n\n/**\n * Searches for the page saved after the one with the given id.\n */\nexport const GET_NEXT_PAGE = gql`\n  query getNextPage($id: String!) {\n    getNextPage(id: $id) {\n      page {\n        ${entirePage}\n      }\n      isEnd\n    }\n  }\n`;","map":{"version":3,"names":["gql","entirePage","FIND_PAGE","GET_PAGE_COUNT","ADD_PAGE","GET_PREVIOUS_PAGE","GET_NEXT_PAGE"],"sources":["/Users/smanor/Development/code/personal/mynichi/frontend/src/utils/queries.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nconst entirePage = `\n  id\n  date {\n    month\n    day {\n      number\n      name\n    }\n    week\n    year\n  }\n`;\n\nexport const FIND_PAGE = gql`\n  query findPage($month: Int, $dayNum: Int, $year: Int, $id: String) {\n    findPage(month: $month, dayNum: $dayNum, year: $year, id: $id) {\n      ${entirePage}\n    }\n  }\n`;\n\nexport const GET_PAGE_COUNT = gql`\n  query {\n    pageCount\n  }\n`;\n\n/**\n * Searches for an existing page with today's date, and if it doesn't exist, creates a new page with that date.\n */\nexport const ADD_PAGE = gql`\n  mutation addPage {\n    addPage {\n      ${entirePage}\n    }\n  }\n`;\n\n/**\n * Searches for the pave saved previous to the one with the given id.\n */\nexport const GET_PREVIOUS_PAGE = gql`\n  query getPreviousPage($id: String!) {\n    getPreviousPage(id: $id) {\n      page {\n        ${entirePage}\n      }\n      isEnd\n    }\n  }\n`;\n\n/**\n * Searches for the page saved after the one with the given id.\n */\nexport const GET_NEXT_PAGE = gql`\n  query getNextPage($id: String!) {\n    getNextPage(id: $id) {\n      page {\n        ${entirePage}\n      }\n      isEnd\n    }\n  }\n`;\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,MAAMC,UAAU,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGF,GAAG;AAC5B;AACA;AACA,QAAQC,UAAU;AAClB;AACA;AACA,CAAC;AAED,OAAO,MAAME,cAAc,GAAGH,GAAG;AACjC;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMI,QAAQ,GAAGJ,GAAG;AAC3B;AACA;AACA,QAAQC,UAAU;AAClB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMI,iBAAiB,GAAGL,GAAG;AACpC;AACA;AACA;AACA,UAAUC,UAAU;AACpB;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMK,aAAa,GAAGN,GAAG;AAChC;AACA;AACA;AACA,UAAUC,UAAU;AACpB;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}