{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/App.js\",\n  _s2 = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { Page } from \"./components/Page\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCurrentPage } from \"./reducers/PageReducer\";\nimport { addPage } from \"./reducers/JournalReducer\";\nimport { getFormattedDate } from \"./utils/getFormattedDate\";\nimport { getTodaysPage } from \"./reducers/PageReducer\";\nimport { useQuery } from \"@apollo/client\";\nimport { FIND_PAGE } from \"./utils/queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  // const pages = useSelector((state) => state.journal.pages);\n\n  const dispatch = useDispatch();\n  _s(useEffect(_s(() => {\n    _s();\n    // if (pages) {\n    //   // get today's date\n    //   const today = getFormattedDate();\n    //   // check if there is a page for today\n    //   const page = pages.find(\n    //     (page) =>\n    //       page.date.year === today.year &&\n    //       page.date.month === today.month &&\n    //       page.date.day.number === today.day.number\n    //   );\n    //   if (page) {\n    //     // if there is a page for today, set it as the current page\n    //     dispatch(setCurrentPage(page));\n    //   } else {\n    //     // if there is no page for today, create a new page\n    //     dispatch(addPage(today));\n    //   }\n    // }\n\n    // dispatch(getTodaysPage());\n    const today = getFormattedDate();\n    const result = useQuery(FIND_PAGE, {\n      variables: {\n        month: today.month,\n        dayNum: today.day.number,\n        year: today.year\n      }\n    });\n    if (result.data) {\n      dispatch(setCurrentPage(result.data.findPage));\n    }\n  }, \"JqpwbFFyOF6wIHaj5E6obYHTpSg=\", false, function () {\n    return [useQuery];\n  }), [dispatch]), \"JqpwbFFyOF6wIHaj5E6obYHTpSg=\", false, function () {\n    return [useQuery];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Page, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","Page","useDispatch","useSelector","setCurrentPage","addPage","getFormattedDate","getTodaysPage","useQuery","FIND_PAGE","jsxDEV","_jsxDEV","App","_s2","_s","$RefreshSig$","dispatch","today","result","variables","month","dayNum","day","number","year","data","findPage","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/App.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { Page } from \"./components/Page\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCurrentPage } from \"./reducers/PageReducer\";\nimport { addPage } from \"./reducers/JournalReducer\";\nimport { getFormattedDate } from \"./utils/getFormattedDate\";\nimport { getTodaysPage } from \"./reducers/PageReducer\";\nimport { useQuery } from \"@apollo/client\";\nimport { FIND_PAGE } from \"./utils/queries\";\n\nfunction App() {\n  // const pages = useSelector((state) => state.journal.pages);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // if (pages) {\n    //   // get today's date\n    //   const today = getFormattedDate();\n    //   // check if there is a page for today\n    //   const page = pages.find(\n    //     (page) =>\n    //       page.date.year === today.year &&\n    //       page.date.month === today.month &&\n    //       page.date.day.number === today.day.number\n    //   );\n    //   if (page) {\n    //     // if there is a page for today, set it as the current page\n    //     dispatch(setCurrentPage(page));\n    //   } else {\n    //     // if there is no page for today, create a new page\n    //     dispatch(addPage(today));\n    //   }\n    // }\n\n    // dispatch(getTodaysPage());\n    const today = getFormattedDate();\n    const result = useQuery(FIND_PAGE, {\n      variables: {\n        month: today.month,\n        dayNum: today.day.number,\n        year: today.year,\n      },\n    });\n    if (result.data) {\n      dispatch(setCurrentPage(result.data.findPage));\n    }\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Page />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,SAAS,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACb;;EAEA,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAE9BY,EAAA,CAAAd,SAAS,CAAAc,EAAA,CAAC,MAAM;IAAAA,EAAA;IACd;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA,MAAMG,KAAK,GAAGX,gBAAgB,CAAC,CAAC;IAChC,MAAMY,MAAM,GAAGV,QAAQ,CAACC,SAAS,EAAE;MACjCU,SAAS,EAAE;QACTC,KAAK,EAAEH,KAAK,CAACG,KAAK;QAClBC,MAAM,EAAEJ,KAAK,CAACK,GAAG,CAACC,MAAM;QACxBC,IAAI,EAAEP,KAAK,CAACO;MACd;IACF,CAAC,CAAC;IACF,IAAIN,MAAM,CAACO,IAAI,EAAE;MACfT,QAAQ,CAACZ,cAAc,CAACc,MAAM,CAACO,IAAI,CAACC,QAAQ,CAAC,CAAC;IAChD;EACF,CAAC;IAAA,QAVgBlB,QAAQ;EAAA,IAUtB,CAACQ,QAAQ,CAAC,CAAC;IAAA,QAVGR,QAAQ;EAAA;EAYzB,oBACEG,OAAA;IAAAgB,QAAA,eACEhB,OAAA,CAACV,IAAI;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAAClB,GAAA,CA5CQD,GAAG;EAAA,QAGOV,WAAW;AAAA;AAAA8B,EAAA,GAHrBpB,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}