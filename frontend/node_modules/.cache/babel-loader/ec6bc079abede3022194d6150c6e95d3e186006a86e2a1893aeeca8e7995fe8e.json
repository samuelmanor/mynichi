{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/components/NavArrow/NavArrow.tsx\",\n  _s = $RefreshSig$();\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\n// @ts-ignore\nimport { GET_AVAILABLE_PAGES, FIND_PAGE } from \"../../utils/queries\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// @ts-ignore\nimport { setCurrentPage } from \"../../reducers/PageReducer\";\nimport { getFormattedDate } from \"../../utils/getFormattedDate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NavArrow = () => {\n  _s();\n  const dispatch = useDispatch();\n  const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector(state => state.currentPage);\n  const today = getFormattedDate();\n  const [prevPageId, setPrevPageId] = useState(null);\n  const [nextPageId, setNextPageId] = useState(null);\n  useEffect(() => {\n    if (availablePages.data) {\n      // find index of the current page within the available pages\n      const currentPageIndex = availablePages.data.getAvailablePages.findIndex(id => id === currentPage.id);\n      // if currentPageIndex is found, set the prevPageIndex and nextPageIndex\n      if (currentPageIndex !== -1) {\n        if (currentPageIndex > 0) {\n          setPrevPageId(availablePages.data.getAvailablePages[currentPageIndex - 1]);\n        } else {\n          setPrevPageId(null);\n        }\n        if (currentPageIndex < availablePages.data.getAvailablePages.length - 1) {\n          setNextPageId(availablePages.data.getAvailablePages[currentPageIndex + 1]);\n        } else {\n          setNextPageId(null);\n        }\n      }\n    }\n  }, [availablePages.data, currentPage.id]);\n  const [changePage] = useLazyQuery(FIND_PAGE, {\n    onCompleted: data => {\n      dispatch(setCurrentPage(data.findPage));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => changePage({\n        variables: {\n          id: prevPageId\n        }\n      }),\n      style: {\n        display: prevPageId === null ? \"none\" : \"\"\n      },\n      children: \"to prev page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => changePage({\n        variables: {\n          month: today.month,\n          year: today.year,\n          dayName: today.day.name,\n          dayNum: today.day.number\n        }\n      }),\n      children: \"to today\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => changePage({\n        variables: {\n          id: nextPageId\n        }\n      }),\n      style: {\n        display: nextPageId === null ? \"none\" : \"\"\n      },\n      children: \"to next page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(NavArrow, \"i12MAN09gE9NkH/J8AyIqUOkXN4=\", false, function () {\n  return [useDispatch, useQuery, useSelector, useLazyQuery];\n});\n_c = NavArrow;\nvar _c;\n$RefreshReg$(_c, \"NavArrow\");","map":{"version":3,"names":["useLazyQuery","useQuery","React","useEffect","useState","GET_AVAILABLE_PAGES","FIND_PAGE","useDispatch","useSelector","setCurrentPage","getFormattedDate","jsxDEV","_jsxDEV","NavArrow","_s","dispatch","availablePages","currentPage","state","today","prevPageId","setPrevPageId","nextPageId","setNextPageId","data","currentPageIndex","getAvailablePages","findIndex","id","length","changePage","onCompleted","findPage","children","onClick","variables","style","display","fileName","_jsxFileName","lineNumber","columnNumber","month","year","dayName","day","name","dayNum","number","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/components/NavArrow/NavArrow.tsx"],"sourcesContent":["import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { FC } from \"react\";\n// @ts-ignore\nimport { GET_AVAILABLE_PAGES, FIND_PAGE } from \"../../utils/queries\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// @ts-ignore\nimport { setCurrentPage } from \"../../reducers/PageReducer\";\nimport { getFormattedDate } from \"../../utils/getFormattedDate\";\n\ninterface NavArrowProps {}\n\nexport const NavArrow: FC<NavArrowProps> = () => {\n  const dispatch = useDispatch();\n\n  const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector((state: any) => state.currentPage);\n  const today = getFormattedDate();\n\n  const [prevPageId, setPrevPageId] = useState<string | null>(null);\n  const [nextPageId, setNextPageId] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (availablePages.data) {\n      // find index of the current page within the available pages\n      const currentPageIndex = availablePages.data.getAvailablePages.findIndex(\n        (id: string) => id === currentPage.id\n      );\n      // if currentPageIndex is found, set the prevPageIndex and nextPageIndex\n      if (currentPageIndex !== -1) {\n        if (currentPageIndex > 0) {\n          setPrevPageId(\n            availablePages.data.getAvailablePages[currentPageIndex - 1]\n          );\n        } else {\n          setPrevPageId(null);\n        }\n        if (\n          currentPageIndex <\n          availablePages.data.getAvailablePages.length - 1\n        ) {\n          setNextPageId(\n            availablePages.data.getAvailablePages[currentPageIndex + 1]\n          );\n        } else {\n          setNextPageId(null);\n        }\n      }\n    }\n  }, [availablePages.data, currentPage.id]);\n\n  const [changePage] = useLazyQuery(FIND_PAGE, {\n    onCompleted: (data) => {\n      dispatch(setCurrentPage(data.findPage));\n    },\n  });\n\n  return (\n    <div>\n      <button\n        onClick={() => changePage({ variables: { id: prevPageId } })}\n        style={{ display: prevPageId === null ? \"none\" : \"\" }}\n      >\n        to prev page\n      </button>\n      <button\n        onClick={() =>\n          changePage({\n            variables: {\n              month: today.month,\n              year: today.year,\n              dayName: today.day.name,\n              dayNum: today.day.number,\n            },\n          })\n        }\n      >\n        to today\n      </button>\n      <button\n        onClick={() => changePage({ variables: { id: nextPageId } })}\n        style={{ display: nextPageId === null ? \"none\" : \"\" }}\n      >\n        to next page\n      </button>\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}