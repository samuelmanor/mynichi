{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/index.js\";\n// import React from \"react\";\n// import ReactDOM from \"react-dom/client\";\n// import \"./index.css\";\n// import App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n// import { Provider } from \"react-redux\";\n// import store from \"./reducers/store\";\n// import { gql } from \"@apollo/client\";\n\n// -----\n\n// const { ApolloServer } = require(\"@apollo/server\");\n// const { startStandaloneServer } = require(\"@apollo/server/standalone\");\n// import { pages } from \"./reducers/JournalReducer\";\n\n// const typeDefs = `\n//   type Page {\n//     id: Int!\n//     date: {\n//     month: Int!\n//     day: {\n//       number: Int!\n//       name: String!\n//     }\n//     year: Int!\n//     }\n//   }\n\n//   type Query {\n//     pages: [Page!]!\n//     getPage(id: Int, date: {month: Int!, day: {number: Int!, name: String!}, year: Int!}): Page\n//   }\n// `;\n\n// const resolvers = {\n//   Query: {\n//     pages: () => pages,\n//     getPage: (parent, args) => {\n//       const { id, date } = args;\n//       if (id) {\n//         return pages.find((page) => page.id === id);\n//       } else {\n//         return pages.find(\n//           (page) =>\n//             page.date.year === date.year &&\n//             page.date.month === date.month &&\n//             page.date.day.number === date.day.number\n//         );\n//       }\n//     },\n//   },\n// };\n\n// const server = new ApolloServer({\n//   typeDefs,\n//   resolvers,\n// });\n\n// startStandaloneServer(server, {\n//   listen: { port: 4000 },\n// }).then(({ url }) => {\n//   console.log(`Server ready at ${url}`);\n// });\n\n// ----\n\n// import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\n// const client = new ApolloClient({\n//   uri: \"http://localhost:4000\",\n//   cache: new InMemoryCache(),\n//   devtools: true,\n//   fetchOptions: {\n//     mode: \"no-cors\",\n//   },\n// });\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <ApolloProvider client={client}>\n//     <Provider store={store}>\n//       <React.StrictMode>\n//         <App />\n//       </React.StrictMode>\n//     </Provider>\n//   </ApolloProvider>\n// );\n\n// copy poasted \\/\n\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport { ApolloClient, ApolloProvider, InMemoryCache, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000\",\n  cache: new InMemoryCache()\n});\n\n// const query = gql`\n//   query {\n//     allPersons {\n//       name\n//       phone\n//       address {\n//         street\n//         city\n//       }\n//       id\n//     }\n//   }\n// `;\n\n// client.query({ query }).then((response) => {\n//   console.log(response.data);\n// });\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(/*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 125,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["ReactDOM","App","ApolloClient","ApolloProvider","InMemoryCache","gql","jsxDEV","_jsxDEV","client","uri","cache","createRoot","document","getElementById","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/index.js"],"sourcesContent":["// import React from \"react\";\n// import ReactDOM from \"react-dom/client\";\n// import \"./index.css\";\n// import App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n// import { Provider } from \"react-redux\";\n// import store from \"./reducers/store\";\n// import { gql } from \"@apollo/client\";\n\n// -----\n\n// const { ApolloServer } = require(\"@apollo/server\");\n// const { startStandaloneServer } = require(\"@apollo/server/standalone\");\n// import { pages } from \"./reducers/JournalReducer\";\n\n// const typeDefs = `\n//   type Page {\n//     id: Int!\n//     date: {\n//     month: Int!\n//     day: {\n//       number: Int!\n//       name: String!\n//     }\n//     year: Int!\n//     }\n//   }\n\n//   type Query {\n//     pages: [Page!]!\n//     getPage(id: Int, date: {month: Int!, day: {number: Int!, name: String!}, year: Int!}): Page\n//   }\n// `;\n\n// const resolvers = {\n//   Query: {\n//     pages: () => pages,\n//     getPage: (parent, args) => {\n//       const { id, date } = args;\n//       if (id) {\n//         return pages.find((page) => page.id === id);\n//       } else {\n//         return pages.find(\n//           (page) =>\n//             page.date.year === date.year &&\n//             page.date.month === date.month &&\n//             page.date.day.number === date.day.number\n//         );\n//       }\n//     },\n//   },\n// };\n\n// const server = new ApolloServer({\n//   typeDefs,\n//   resolvers,\n// });\n\n// startStandaloneServer(server, {\n//   listen: { port: 4000 },\n// }).then(({ url }) => {\n//   console.log(`Server ready at ${url}`);\n// });\n\n// ----\n\n// import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\n// const client = new ApolloClient({\n//   uri: \"http://localhost:4000\",\n//   cache: new InMemoryCache(),\n//   devtools: true,\n//   fetchOptions: {\n//     mode: \"no-cors\",\n//   },\n// });\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <ApolloProvider client={client}>\n//     <Provider store={store}>\n//       <React.StrictMode>\n//         <App />\n//       </React.StrictMode>\n//     </Provider>\n//   </ApolloProvider>\n// );\n\n// copy poasted \\/\n\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n  gql,\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000\",\n  cache: new InMemoryCache(),\n});\n\n// const query = gql`\n//   query {\n//     allPersons {\n//       name\n//       phone\n//       address {\n//         street\n//         city\n//       }\n//       id\n//     }\n//   }\n// `;\n\n// client.query({ query }).then((response) => {\n//   console.log(response.data);\n// });\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,GAAG,MAAM,OAAO;AAEvB,SACEC,YAAY,EACZC,cAAc,EACdC,aAAa,EACbC,GAAG,QACE,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,MAAM,GAAG,IAAIN,YAAY,CAAC;EAC9BO,GAAG,EAAE,uBAAuB;EAC5BC,KAAK,EAAE,IAAIN,aAAa,CAAC;AAC3B,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEAJ,QAAQ,CAACW,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC,CAACC,MAAM,cACzDP,OAAA,CAACJ,cAAc;EAACK,MAAM,EAAEA,MAAO;EAAAO,QAAA,eAC7BR,OAAA,CAACN,GAAG;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACO,CAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}