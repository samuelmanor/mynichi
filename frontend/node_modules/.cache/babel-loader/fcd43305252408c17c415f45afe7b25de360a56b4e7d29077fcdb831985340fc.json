{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/frontend/src/components/NavArrow/NavArrow.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\n\n// @ts-ignore\n\nimport { useSelector } from \"react-redux\";\n// @ts-ignore\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NavArrow = () => {\n  _s();\n  // const dispatch = useDispatch();\n\n  // const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector(state => state.currentPage);\n  // const today = getFormattedDate();\n\n  // const [prevPageId, setPrevPageId] = useState<string | null>(null);\n  // const [nextPageId, setNextPageId] = useState<string | null>(null);\n\n  // useEffect(() => {\n  //   // if (availablePages.data) {\n  //   //   // find index of the current page within the available pages\n  //   //   const currentPageIndex = availablePages.data.getAvailablePages.findIndex(\n  //   //     (id: string) => id === currentPage.id\n  //   //   );\n  //   //   // if currentPageIndex is found, set the prevPageIndex and nextPageIndex\n  //   //   if (currentPageIndex !== -1) {\n  //   //     if (currentPageIndex > 0) {\n  //   //       setPrevPageId(\n  //   //         availablePages.data.getAvailablePages[currentPageIndex - 1]\n  //   //       );\n  //   //     } else {\n  //   //       setPrevPageId(null);\n  //   //     }\n  //   //     if (\n  //   //       currentPageIndex <\n  //   //       availablePages.data.getAvailablePages.length - 1\n  //   //     ) {\n  //   //       setNextPageId(\n  //   //         availablePages.data.getAvailablePages[currentPageIndex + 1]\n  //   //       );\n  //   //     } else {\n  //   //       setNextPageId(null);\n  //   //     }\n  //   //   }\n  //   // }\n  // }, [currentPage.id]);\n\n  // const [changePage] = useLazyQuery(FIND_PAGE, {\n  //   // onCompleted: (data) => {\n  //   //   dispatch(setCurrentPage(data.findPage));\n  //   // },\n  // });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(currentPage),\n      children: \"current\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(NavArrow, \"5p5q2PB63HzrSR3wvHiZuK4WYqE=\", false, function () {\n  return [useSelector];\n});\n_c = NavArrow;\nvar _c;\n$RefreshReg$(_c, \"NavArrow\");","map":{"version":3,"names":["React","useSelector","jsxDEV","_jsxDEV","NavArrow","_s","currentPage","state","children","onClick","console","log","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/frontend/src/components/NavArrow/NavArrow.tsx"],"sourcesContent":["import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { FC } from \"react\";\n// @ts-ignore\nimport { GET_NEXT_PAGE } from \"../../utils/queries\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// @ts-ignore\nimport { setCurrentPage } from \"../../reducers/PageReducer\";\nimport { getFormattedDate } from \"../../utils/getFormattedDate\";\n\ninterface NavArrowProps {}\n\nexport const NavArrow: FC<NavArrowProps> = () => {\n  // const dispatch = useDispatch();\n\n  // const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector((state: any) => state.currentPage);\n  // const today = getFormattedDate();\n\n  // const [prevPageId, setPrevPageId] = useState<string | null>(null);\n  // const [nextPageId, setNextPageId] = useState<string | null>(null);\n\n  // useEffect(() => {\n  //   // if (availablePages.data) {\n  //   //   // find index of the current page within the available pages\n  //   //   const currentPageIndex = availablePages.data.getAvailablePages.findIndex(\n  //   //     (id: string) => id === currentPage.id\n  //   //   );\n  //   //   // if currentPageIndex is found, set the prevPageIndex and nextPageIndex\n  //   //   if (currentPageIndex !== -1) {\n  //   //     if (currentPageIndex > 0) {\n  //   //       setPrevPageId(\n  //   //         availablePages.data.getAvailablePages[currentPageIndex - 1]\n  //   //       );\n  //   //     } else {\n  //   //       setPrevPageId(null);\n  //   //     }\n  //   //     if (\n  //   //       currentPageIndex <\n  //   //       availablePages.data.getAvailablePages.length - 1\n  //   //     ) {\n  //   //       setNextPageId(\n  //   //         availablePages.data.getAvailablePages[currentPageIndex + 1]\n  //   //       );\n  //   //     } else {\n  //   //       setNextPageId(null);\n  //   //     }\n  //   //   }\n  //   // }\n  // }, [currentPage.id]);\n\n  // const [changePage] = useLazyQuery(FIND_PAGE, {\n  //   // onCompleted: (data) => {\n  //   //   dispatch(setCurrentPage(data.findPage));\n  //   // },\n  // });\n\n  return (\n    <div>\n      {/* <button\n        onClick={() => changePage({ variables: { id: prevPageId } })}\n        style={{ display: prevPageId === null ? \"none\" : \"\" }}\n      >\n        to prev page\n      </button>\n      <button\n        onClick={() =>\n          changePage({\n            variables: {\n              month: today.month,\n              year: today.year,\n              dayName: today.day.name,\n              dayNum: today.day.number,\n            },\n          })\n        }\n      >\n        to today\n      </button>\n      <button\n        onClick={() => changePage({ variables: { id: nextPageId } })}\n        style={{ display: nextPageId === null ? \"none\" : \"\" }}\n      >\n        to next page\n      </button> */}\n      <button onClick={() => console.log(currentPage)}>current</button>\n    </div>\n  );\n};\n"],"mappings":";;AACA,OAAOA,KAAK,MAA+B,OAAO;;AAElD;;AAEA,SAAsBC,WAAW,QAAQ,aAAa;AACtD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA,OAAO,MAAMC,QAA2B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/C;;EAEA;EACA,MAAMC,WAAW,GAAGL,WAAW,CAAEM,KAAU,IAAKA,KAAK,CAACD,WAAW,CAAC;EAClE;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,oBACEH,OAAA;IAAAK,QAAA,eA2BEL,OAAA;MAAQM,OAAO,EAAEA,CAAA,KAAMC,OAAO,CAACC,GAAG,CAACL,WAAW,CAAE;MAAAE,QAAA,EAAC;IAAO;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9D,CAAC;AAEV,CAAC;AAACV,EAAA,CA5EWD,QAA2B;EAAA,QAIlBH,WAAW;AAAA;AAAAe,EAAA,GAJpBZ,QAA2B;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}