{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/components/NavArrow/NavArrow.tsx\",\n  _s = $RefreshSig$();\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\n// @ts-ignore\nimport { GET_AVAILABLE_PAGES, FIND_PAGE } from \"../../utils/queries\";\nimport { useSelector } from \"react-redux\";\n// @ts-ignore\n\n// @ts-ignore\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NavArrow = () => {\n  _s();\n  // const dispatch = useDispatch();\n\n  const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector(state => state.currentPage);\n  const [prevPageId, setPrevPageId] = useState(null);\n  const [nextPageId, setNextPageId] = useState(null);\n  useEffect(() => {\n    if (availablePages.data) {\n      // find index of the current page within the available pages\n      const currentPageIndex = availablePages.data.getAvailablePages.findIndex(id => id === currentPage.id);\n      // if currentPageIndex is found, set the prevPageIndex and nextPageIndex\n      if (currentPageIndex !== -1) {\n        // setPrevPageId(availablePages.data.getAvailablePages[currentPageIndex - 1]);\n        // setNextPageId(availablePages.data.getAvailablePages[currentPageIndex + 1]);\n        if (currentPageIndex > 0) {\n          setPrevPageId(availablePages.data.getAvailablePages[currentPageIndex - 1]);\n        }\n        if (currentPageIndex < availablePages.data.getAvailablePages.length - 1) {\n          setNextPageId(availablePages.data.getAvailablePages[currentPageIndex + 1]);\n        }\n      }\n    }\n  }, [availablePages.data, currentPage.id]);\n  const [findPage] = useLazyQuery(FIND_PAGE, {\n    onCompleted: data => {\n      // dispatch(setCurrentPage(data.findPage));\n      console.log(\"hi\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(prevPageId, nextPageId),\n      children: \"log prev and next pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => findPage({\n        variables: {\n          id: prevPageId\n        }\n      }),\n      children: \"find prev page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(NavArrow, \"ZP4Q2hVim1VotHzw80X3ztLuu+Q=\", false, function () {\n  return [useQuery, useSelector, useLazyQuery];\n});\n_c = NavArrow;\nvar _c;\n$RefreshReg$(_c, \"NavArrow\");","map":{"version":3,"names":["useLazyQuery","useQuery","React","useEffect","useState","GET_AVAILABLE_PAGES","FIND_PAGE","useSelector","jsxDEV","_jsxDEV","NavArrow","_s","availablePages","currentPage","state","prevPageId","setPrevPageId","nextPageId","setNextPageId","data","currentPageIndex","getAvailablePages","findIndex","id","length","findPage","onCompleted","console","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","variables","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/components/NavArrow/NavArrow.tsx"],"sourcesContent":["import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { FC } from \"react\";\n// @ts-ignore\nimport { GET_AVAILABLE_PAGES, FIND_PAGE } from \"../../utils/queries\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// @ts-ignore\nimport { Page } from \"../../utils/gql\";\n// @ts-ignore\nimport { setCurrentPage } from \"../../reducers/PageReducer\";\n\ninterface NavArrowProps {}\n\nexport const NavArrow: FC<NavArrowProps> = () => {\n  // const dispatch = useDispatch();\n\n  const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector((state: any) => state.currentPage);\n\n  const [prevPageId, setPrevPageId] = useState<string | null>(null);\n  const [nextPageId, setNextPageId] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (availablePages.data) {\n      // find index of the current page within the available pages\n      const currentPageIndex = availablePages.data.getAvailablePages.findIndex(\n        (id: string) => id === currentPage.id\n      );\n      // if currentPageIndex is found, set the prevPageIndex and nextPageIndex\n      if (currentPageIndex !== -1) {\n        // setPrevPageId(availablePages.data.getAvailablePages[currentPageIndex - 1]);\n        // setNextPageId(availablePages.data.getAvailablePages[currentPageIndex + 1]);\n        if (currentPageIndex > 0) {\n          setPrevPageId(\n            availablePages.data.getAvailablePages[currentPageIndex - 1]\n          );\n        }\n        if (\n          currentPageIndex <\n          availablePages.data.getAvailablePages.length - 1\n        ) {\n          setNextPageId(\n            availablePages.data.getAvailablePages[currentPageIndex + 1]\n          );\n        }\n      }\n    }\n  }, [availablePages.data, currentPage.id]);\n\n  const [findPage] = useLazyQuery(FIND_PAGE, {\n    onCompleted: (data) => {\n      // dispatch(setCurrentPage(data.findPage));\n      console.log(\"hi\");\n    },\n  });\n\n  return (\n    <div>\n      {/* <button\n        style={{ display: prevPageIndex !== null ? \"\" : \"none\" }}\n        onClick={() => {\n          console.log(prevPageIndex);\n        }}\n      >\n        prev page\n      </button>\n      <button\n        style={{ display: nextPageIndex !== null ? \"\" : \"none\" }}\n        onClick={() => {\n          console.log(nextPageIndex);\n        }}\n      >\n        next page\n      </button> */}\n      <button onClick={() => console.log(prevPageId, nextPageId)}>\n        log prev and next pages\n      </button>\n      <button onClick={() => findPage({ variables: { id: prevPageId } })}>\n        find prev page\n      </button>\n    </div>\n  );\n};\n"],"mappings":";;AAAA,SAASA,YAAY,EAAEC,QAAQ,QAAQ,gBAAgB;AACvD,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD;AACA,SAASC,mBAAmB,EAAEC,SAAS,QAAQ,qBAAqB;AACpE,SAAsBC,WAAW,QAAQ,aAAa;AACtD;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA,OAAO,MAAMC,QAA2B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/C;;EAEA,MAAMC,cAAc,GAAGX,QAAQ,CAACI,mBAAmB,CAAC;EACpD,MAAMQ,WAAW,GAAGN,WAAW,CAAEO,KAAU,IAAKA,KAAK,CAACD,WAAW,CAAC;EAElE,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EACjE,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAgB,IAAI,CAAC;EAEjED,SAAS,CAAC,MAAM;IACd,IAAIS,cAAc,CAACO,IAAI,EAAE;MACvB;MACA,MAAMC,gBAAgB,GAAGR,cAAc,CAACO,IAAI,CAACE,iBAAiB,CAACC,SAAS,CACrEC,EAAU,IAAKA,EAAE,KAAKV,WAAW,CAACU,EACrC,CAAC;MACD;MACA,IAAIH,gBAAgB,KAAK,CAAC,CAAC,EAAE;QAC3B;QACA;QACA,IAAIA,gBAAgB,GAAG,CAAC,EAAE;UACxBJ,aAAa,CACXJ,cAAc,CAACO,IAAI,CAACE,iBAAiB,CAACD,gBAAgB,GAAG,CAAC,CAC5D,CAAC;QACH;QACA,IACEA,gBAAgB,GAChBR,cAAc,CAACO,IAAI,CAACE,iBAAiB,CAACG,MAAM,GAAG,CAAC,EAChD;UACAN,aAAa,CACXN,cAAc,CAACO,IAAI,CAACE,iBAAiB,CAACD,gBAAgB,GAAG,CAAC,CAC5D,CAAC;QACH;MACF;IACF;EACF,CAAC,EAAE,CAACR,cAAc,CAACO,IAAI,EAAEN,WAAW,CAACU,EAAE,CAAC,CAAC;EAEzC,MAAM,CAACE,QAAQ,CAAC,GAAGzB,YAAY,CAACM,SAAS,EAAE;IACzCoB,WAAW,EAAGP,IAAI,IAAK;MACrB;MACAQ,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;IACnB;EACF,CAAC,CAAC;EAEF,oBACEnB,OAAA;IAAAoB,QAAA,gBAiBEpB,OAAA;MAAQqB,OAAO,EAAEA,CAAA,KAAMH,OAAO,CAACC,GAAG,CAACb,UAAU,EAAEE,UAAU,CAAE;MAAAY,QAAA,EAAC;IAE5D;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTzB,OAAA;MAAQqB,OAAO,EAAEA,CAAA,KAAML,QAAQ,CAAC;QAAEU,SAAS,EAAE;UAAEZ,EAAE,EAAER;QAAW;MAAE,CAAC,CAAE;MAAAc,QAAA,EAAC;IAEpE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACvB,EAAA,CArEWD,QAA2B;EAAA,QAGfT,QAAQ,EACXM,WAAW,EAgCZP,YAAY;AAAA;AAAAoC,EAAA,GApCpB1B,QAA2B;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}