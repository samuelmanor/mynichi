{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { Page } from \"./components/Page\";\nimport { NavArrow } from \"./components/NavArrow\";\nimport { useDispatch } from \"react-redux\";\nimport { setCurrentPage } from \"./reducers/PageReducer\";\nimport { getFormattedDate } from \"./utils/getFormattedDate\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_PAGE, GET_PAGE_COUNT, GET_AVAILABLE_PAGES } from \"./utils/queries\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const dispatch = useDispatch();\n  const today = getFormattedDate();\n  const [getTodaysPage] = useMutation(ADD_PAGE, {\n    refetchQueries: [{\n      query: GET_PAGE_COUNT\n    }, {\n      query: GET_AVAILABLE_PAGES\n    }],\n    variables: {\n      month: today.month,\n      dayName: today.day.name,\n      dayNum: today.day.number,\n      year: today.year\n    },\n    onCompleted: data => {\n      dispatch(setCurrentPage(data.addPage));\n    }\n  });\n\n  // const getPageCount = useQuery(GET_PAGE_COUNT, {\n  //   onCompleted: (data) => {\n  //     console.log(data);\n  //     dispatch(setPageCount(data.pageCount));\n  //   },\n  // });\n\n  useEffect(() => {\n    getTodaysPage();\n  }, [getTodaysPage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Page, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavArrow, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aKvyRsE9cXp0L/NC9y98AMj3OdA=\", false, function () {\n  return [useDispatch, useMutation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","Page","NavArrow","useDispatch","setCurrentPage","getFormattedDate","useMutation","ADD_PAGE","GET_PAGE_COUNT","GET_AVAILABLE_PAGES","React","jsxDEV","_jsxDEV","App","_s","dispatch","today","getTodaysPage","refetchQueries","query","variables","month","dayName","day","name","dayNum","number","year","onCompleted","data","addPage","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/App.tsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { Page } from \"./components/Page\";\nimport { NavArrow } from \"./components/NavArrow\";\nimport { useDispatch } from \"react-redux\";\nimport { setCurrentPage } from \"./reducers/PageReducer\";\nimport { getFormattedDate } from \"./utils/getFormattedDate\";\nimport { useMutation } from \"@apollo/client\";\nimport {\n  FIND_PAGE,\n  ADD_PAGE,\n  GET_PAGE_COUNT,\n  GET_AVAILABLE_PAGES,\n} from \"./utils/queries\";\nimport React from \"react\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  const today = getFormattedDate();\n  const [getTodaysPage] = useMutation(ADD_PAGE, {\n    refetchQueries: [{ query: GET_PAGE_COUNT }, { query: GET_AVAILABLE_PAGES }],\n    variables: {\n      month: today.month,\n      dayName: today.day.name,\n      dayNum: today.day.number,\n      year: today.year,\n    },\n    onCompleted: (data) => {\n      dispatch(setCurrentPage(data.addPage));\n    },\n  });\n\n  // const getPageCount = useQuery(GET_PAGE_COUNT, {\n  //   onCompleted: (data) => {\n  //     console.log(data);\n  //     dispatch(setPageCount(data.pageCount));\n  //   },\n  // });\n\n  useEffect(() => {\n    getTodaysPage();\n  }, [getTodaysPage]);\n\n  return (\n    <div>\n      <Page />\n      <NavArrow />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAEEC,QAAQ,EACRC,cAAc,EACdC,mBAAmB,QACd,iBAAiB;AACxB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAE9B,MAAMa,KAAK,GAAGX,gBAAgB,CAAC,CAAC;EAChC,MAAM,CAACY,aAAa,CAAC,GAAGX,WAAW,CAACC,QAAQ,EAAE;IAC5CW,cAAc,EAAE,CAAC;MAAEC,KAAK,EAAEX;IAAe,CAAC,EAAE;MAAEW,KAAK,EAAEV;IAAoB,CAAC,CAAC;IAC3EW,SAAS,EAAE;MACTC,KAAK,EAAEL,KAAK,CAACK,KAAK;MAClBC,OAAO,EAAEN,KAAK,CAACO,GAAG,CAACC,IAAI;MACvBC,MAAM,EAAET,KAAK,CAACO,GAAG,CAACG,MAAM;MACxBC,IAAI,EAAEX,KAAK,CAACW;IACd,CAAC;IACDC,WAAW,EAAGC,IAAI,IAAK;MACrBd,QAAQ,CAACX,cAAc,CAACyB,IAAI,CAACC,OAAO,CAAC,CAAC;IACxC;EACF,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;;EAEA9B,SAAS,CAAC,MAAM;IACdiB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,oBACEL,OAAA;IAAAmB,QAAA,gBACEnB,OAAA,CAACX,IAAI;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACRvB,OAAA,CAACV,QAAQ;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV;AAACrB,EAAA,CAlCQD,GAAG;EAAA,QACOV,WAAW,EAGJG,WAAW;AAAA;AAAA8B,EAAA,GAJ5BvB,GAAG;AAoCZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}