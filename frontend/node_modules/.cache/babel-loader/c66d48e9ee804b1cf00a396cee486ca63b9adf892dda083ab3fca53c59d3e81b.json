{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/components/NavArrow/NavArrow.tsx\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\n// @ts-ignore\nimport { GET_AVAILABLE_PAGES } from \"../../utils/queries\";\nimport { useSelector } from \"react-redux\";\n// @ts-ignore\n\n// @ts-ignore\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NavArrow = () => {\n  _s();\n  // const dispatch = useDispatch();\n\n  const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector(state => state.currentPage);\n  const [prevPageIndex, setPrevPageIndex] = useState(null);\n  const [nextPageIndex, setNextPageIndex] = useState(null);\n  useEffect(() => {\n    if (availablePages.data) {\n      const pages = availablePages.data.getAvailablePages;\n      const currentPageIndex = pages.findIndex(id => {\n        return id === currentPage.id;\n      });\n      if (currentPageIndex > 0) {\n        setPrevPageIndex(currentPageIndex - 1);\n      }\n      if (currentPageIndex < pages.length - 1) {\n        setNextPageIndex(currentPageIndex + 1);\n      }\n    }\n  }, [availablePages.data, currentPage.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        display: prevPageIndex !== null ? \"\" : \"none\"\n      },\n      children: \"prev page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"next page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(NavArrow, \"AeNj6Q3+WV5Brv+SCQ8cjM/r27c=\", false, function () {\n  return [useQuery, useSelector];\n});\n_c = NavArrow;\nvar _c;\n$RefreshReg$(_c, \"NavArrow\");","map":{"version":3,"names":["useQuery","React","useEffect","useState","GET_AVAILABLE_PAGES","useSelector","jsxDEV","_jsxDEV","NavArrow","_s","availablePages","currentPage","state","prevPageIndex","setPrevPageIndex","nextPageIndex","setNextPageIndex","data","pages","getAvailablePages","currentPageIndex","findIndex","id","length","children","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/components/NavArrow/NavArrow.tsx"],"sourcesContent":["import { useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { FC } from \"react\";\n// @ts-ignore\nimport { GET_AVAILABLE_PAGES } from \"../../utils/queries\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// @ts-ignore\nimport { Page } from \"../../utils/gql\";\n// @ts-ignore\nimport { setCurrentPage } from \"../../reducers/PageReducer\";\n\ninterface NavArrowProps {}\n\nexport const NavArrow: FC<NavArrowProps> = () => {\n  // const dispatch = useDispatch();\n\n  const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector((state: any) => state.currentPage);\n\n  const [prevPageIndex, setPrevPageIndex] = useState<number | null>(null);\n  const [nextPageIndex, setNextPageIndex] = useState<number | null>(null);\n\n  useEffect(() => {\n    if (availablePages.data) {\n      const pages = availablePages.data.getAvailablePages;\n      const currentPageIndex = pages.findIndex((id: string) => {\n        return id === currentPage.id;\n      });\n      if (currentPageIndex > 0) {\n        setPrevPageIndex(currentPageIndex - 1);\n      }\n      if (currentPageIndex < pages.length - 1) {\n        setNextPageIndex(currentPageIndex + 1);\n      }\n    }\n  }, [availablePages.data, currentPage.id]);\n\n  return (\n    <div>\n      <button style={{ display: prevPageIndex !== null ? \"\" : \"none\" }}>\n        prev page\n      </button>\n      <button>next page</button>\n    </div>\n  );\n};\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD;AACA,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAAsBC,WAAW,QAAQ,aAAa;AACtD;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA,OAAO,MAAMC,QAA2B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/C;;EAEA,MAAMC,cAAc,GAAGV,QAAQ,CAACI,mBAAmB,CAAC;EACpD,MAAMO,WAAW,GAAGN,WAAW,CAAEO,KAAU,IAAKA,KAAK,CAACD,WAAW,CAAC;EAElE,MAAM,CAACE,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EACvE,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EAEvED,SAAS,CAAC,MAAM;IACd,IAAIQ,cAAc,CAACO,IAAI,EAAE;MACvB,MAAMC,KAAK,GAAGR,cAAc,CAACO,IAAI,CAACE,iBAAiB;MACnD,MAAMC,gBAAgB,GAAGF,KAAK,CAACG,SAAS,CAAEC,EAAU,IAAK;QACvD,OAAOA,EAAE,KAAKX,WAAW,CAACW,EAAE;MAC9B,CAAC,CAAC;MACF,IAAIF,gBAAgB,GAAG,CAAC,EAAE;QACxBN,gBAAgB,CAACM,gBAAgB,GAAG,CAAC,CAAC;MACxC;MACA,IAAIA,gBAAgB,GAAGF,KAAK,CAACK,MAAM,GAAG,CAAC,EAAE;QACvCP,gBAAgB,CAACI,gBAAgB,GAAG,CAAC,CAAC;MACxC;IACF;EACF,CAAC,EAAE,CAACV,cAAc,CAACO,IAAI,EAAEN,WAAW,CAACW,EAAE,CAAC,CAAC;EAEzC,oBACEf,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAQkB,KAAK,EAAE;QAAEC,OAAO,EAAEb,aAAa,KAAK,IAAI,GAAG,EAAE,GAAG;MAAO,CAAE;MAAAW,QAAA,EAAC;IAElE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTvB,OAAA;MAAAiB,QAAA,EAAQ;IAAS;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAEV,CAAC;AAACrB,EAAA,CAhCWD,QAA2B;EAAA,QAGfR,QAAQ,EACXK,WAAW;AAAA;AAAA0B,EAAA,GAJpBvB,QAA2B;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}