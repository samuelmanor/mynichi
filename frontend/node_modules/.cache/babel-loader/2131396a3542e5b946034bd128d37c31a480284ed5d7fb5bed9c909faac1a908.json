{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/mynichi/src/components/NavArrow/NavArrow.tsx\",\n  _s = $RefreshSig$();\nimport { useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\n// @ts-ignore\nimport { GET_AVAILABLE_PAGES } from \"../../utils/queries\";\nimport { useSelector } from \"react-redux\";\n// @ts-ignore\n\n// @ts-ignore\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NavArrow = () => {\n  _s();\n  // const dispatch = useDispatch();\n\n  const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector(state => state.currentPage);\n  const [prevPageExists, setPrevPageExists] = useState(false);\n  const [nextPageExists, setNextPageExists] = useState(false);\n\n  // const prevPageExists = () => {\n  //   if (availablePages.data) {\n  //     const pages = availablePages.data.getAvailablePages;\n  //     const currentPageIndex = pages.findIndex((id: string) => {\n  //       return id === currentPage.id;\n  //     });\n  //     console.log(currentPageIndex, pages);\n  //   }\n  // };\n\n  // const nextPageExists = () => {};\n\n  useEffect(() => {\n    if (availablePages.data) {\n      const pages = availablePages.data.getAvailablePages;\n      const currentPageIndex = pages.findIndex(id => {\n        return id === currentPage.id;\n      });\n      if (currentPageIndex > 0) {\n        setPrevPageExists(true);\n      }\n      if (currentPageIndex < pages.length - 1) {\n        setNextPageExists(true);\n      }\n    }\n  }, [availablePages.data, currentPage.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(\"hi\"),\n      children: \"log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(NavArrow, \"u9ygCZxrI8yWtW/1UvTIqjkr3UQ=\", false, function () {\n  return [useQuery, useSelector];\n});\n_c = NavArrow;\nvar _c;\n$RefreshReg$(_c, \"NavArrow\");","map":{"version":3,"names":["useQuery","React","useEffect","useState","GET_AVAILABLE_PAGES","useSelector","jsxDEV","_jsxDEV","NavArrow","_s","availablePages","currentPage","state","prevPageExists","setPrevPageExists","nextPageExists","setNextPageExists","data","pages","getAvailablePages","currentPageIndex","findIndex","id","length","children","onClick","console","log","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/mynichi/src/components/NavArrow/NavArrow.tsx"],"sourcesContent":["import { useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { FC } from \"react\";\n// @ts-ignore\nimport { GET_AVAILABLE_PAGES } from \"../../utils/queries\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// @ts-ignore\nimport { Page } from \"../../utils/gql\";\n// @ts-ignore\nimport { setCurrentPage } from \"../../reducers/PageReducer\";\n\ninterface NavArrowProps {}\n\nexport const NavArrow: FC<NavArrowProps> = () => {\n  // const dispatch = useDispatch();\n\n  const availablePages = useQuery(GET_AVAILABLE_PAGES);\n  const currentPage = useSelector((state: any) => state.currentPage);\n\n  const [prevPageExists, setPrevPageExists] = useState(false);\n  const [nextPageExists, setNextPageExists] = useState(false);\n\n  // const prevPageExists = () => {\n  //   if (availablePages.data) {\n  //     const pages = availablePages.data.getAvailablePages;\n  //     const currentPageIndex = pages.findIndex((id: string) => {\n  //       return id === currentPage.id;\n  //     });\n  //     console.log(currentPageIndex, pages);\n  //   }\n  // };\n\n  // const nextPageExists = () => {};\n\n  useEffect(() => {\n    if (availablePages.data) {\n      const pages = availablePages.data.getAvailablePages;\n      const currentPageIndex = pages.findIndex((id: string) => {\n        return id === currentPage.id;\n      });\n      if (currentPageIndex > 0) {\n        setPrevPageExists(true);\n      }\n      if (currentPageIndex < pages.length - 1) {\n        setNextPageExists(true);\n      }\n    }\n  }, [availablePages.data, currentPage.id]);\n\n  return (\n    <div>\n      <button onClick={() => console.log(\"hi\")}>log</button>\n    </div>\n  );\n};\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD;AACA,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAAsBC,WAAW,QAAQ,aAAa;AACtD;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA,OAAO,MAAMC,QAA2B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/C;;EAEA,MAAMC,cAAc,GAAGV,QAAQ,CAACI,mBAAmB,CAAC;EACpD,MAAMO,WAAW,GAAGN,WAAW,CAAEO,KAAU,IAAKA,KAAK,CAACD,WAAW,CAAC;EAElE,MAAM,CAACE,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAE3D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEAD,SAAS,CAAC,MAAM;IACd,IAAIQ,cAAc,CAACO,IAAI,EAAE;MACvB,MAAMC,KAAK,GAAGR,cAAc,CAACO,IAAI,CAACE,iBAAiB;MACnD,MAAMC,gBAAgB,GAAGF,KAAK,CAACG,SAAS,CAAEC,EAAU,IAAK;QACvD,OAAOA,EAAE,KAAKX,WAAW,CAACW,EAAE;MAC9B,CAAC,CAAC;MACF,IAAIF,gBAAgB,GAAG,CAAC,EAAE;QACxBN,iBAAiB,CAAC,IAAI,CAAC;MACzB;MACA,IAAIM,gBAAgB,GAAGF,KAAK,CAACK,MAAM,GAAG,CAAC,EAAE;QACvCP,iBAAiB,CAAC,IAAI,CAAC;MACzB;IACF;EACF,CAAC,EAAE,CAACN,cAAc,CAACO,IAAI,EAAEN,WAAW,CAACW,EAAE,CAAC,CAAC;EAEzC,oBACEf,OAAA;IAAAiB,QAAA,eACEjB,OAAA;MAAQkB,OAAO,EAAEA,CAAA,KAAMC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAE;MAAAH,QAAA,EAAC;IAAG;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV,CAAC;AAACtB,EAAA,CAzCWD,QAA2B;EAAA,QAGfR,QAAQ,EACXK,WAAW;AAAA;AAAA2B,EAAA,GAJpBxB,QAA2B;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}