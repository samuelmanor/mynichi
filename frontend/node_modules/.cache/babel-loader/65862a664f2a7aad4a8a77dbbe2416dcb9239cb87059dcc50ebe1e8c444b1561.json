{"ast":null,"code":"/**\n * Returns the current date in the format of the FormattedDate type.\n * @returns { FormattedDate } The current date.\n * @example\n * ```\n * const date = getFormattedDate();\n * console.log(date);\n * // {\n * //   month: 11,\n * //   week: 5,\n * //   day: {\n * //     number: 26,\n * //     name: \"tue\"\n * //   },\n * //   year: 2024\n * // }\n * ```\n */\n\nDate.prototype.getWeekOfMonth = function () {\n  var firstWeekday = new Date(this.getFullYear(), this.getMonth(), 1).getDay();\n  var offsetDate = this.getDate() + firstWeekday - 1;\n  return Math.floor(offsetDate / 7) + 1;\n};\nexport const getFormattedDate = () => {\n  const today = new Date();\n  return {\n    day: {\n      number: today.getDate(),\n      name: today.toDateString().split(\" \")[0].toLowerCase()\n    },\n    month: today.getMonth() + 1,\n    year: today.getFullYear(),\n    week: today.getWeekOfMonth()\n  };\n};","map":{"version":3,"names":["Date","prototype","getWeekOfMonth","firstWeekday","getFullYear","getMonth","getDay","offsetDate","getDate","Math","floor","getFormattedDate","today","day","number","name","toDateString","split","toLowerCase","month","year","week"],"sources":["/Users/smanor/Development/code/personal/mynichi/frontend/src/utils/getFormattedDate.ts"],"sourcesContent":["export type FormattedDate = {\n  month: number;\n  week: number;\n  day: {\n    number: number;\n    name: string;\n  };\n  year: number;\n};\n\n/**\n * Returns the current date in the format of the FormattedDate type.\n * @returns { FormattedDate } The current date.\n * @example\n * ```\n * const date = getFormattedDate();\n * console.log(date);\n * // {\n * //   month: 11,\n * //   week: 5,\n * //   day: {\n * //     number: 26,\n * //     name: \"tue\"\n * //   },\n * //   year: 2024\n * // }\n * ```\n */\ndeclare global {\n  interface Date {\n    getWeekOfMonth(): number;\n  }\n}\n\nDate.prototype.getWeekOfMonth = function (): number {\n  var firstWeekday = new Date(this.getFullYear(), this.getMonth(), 1).getDay();\n  var offsetDate = this.getDate() + firstWeekday - 1;\n  return Math.floor(offsetDate / 7) + 1;\n};\n\nexport const getFormattedDate = (): FormattedDate => {\n  const today = new Date();\n\n  return {\n    day: {\n      number: today.getDate(),\n      name: today.toDateString().split(\" \")[0].toLowerCase(),\n    },\n    month: today.getMonth() + 1,\n    year: today.getFullYear(),\n    week: today.getWeekOfMonth(),\n  };\n};\n"],"mappings":"AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOAA,IAAI,CAACC,SAAS,CAACC,cAAc,GAAG,YAAoB;EAClD,IAAIC,YAAY,GAAG,IAAIH,IAAI,CAAC,IAAI,CAACI,WAAW,CAAC,CAAC,EAAE,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;EAC5E,IAAIC,UAAU,GAAG,IAAI,CAACC,OAAO,CAAC,CAAC,GAAGL,YAAY,GAAG,CAAC;EAClD,OAAOM,IAAI,CAACC,KAAK,CAACH,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC;AACvC,CAAC;AAED,OAAO,MAAMI,gBAAgB,GAAGA,CAAA,KAAqB;EACnD,MAAMC,KAAK,GAAG,IAAIZ,IAAI,CAAC,CAAC;EAExB,OAAO;IACLa,GAAG,EAAE;MACHC,MAAM,EAAEF,KAAK,CAACJ,OAAO,CAAC,CAAC;MACvBO,IAAI,EAAEH,KAAK,CAACI,YAAY,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC;IACvD,CAAC;IACDC,KAAK,EAAEP,KAAK,CAACP,QAAQ,CAAC,CAAC,GAAG,CAAC;IAC3Be,IAAI,EAAER,KAAK,CAACR,WAAW,CAAC,CAAC;IACzBiB,IAAI,EAAET,KAAK,CAACV,cAAc,CAAC;EAC7B,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}